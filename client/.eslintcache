[{"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/App.js":"1","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryUserData.js":"2","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/Landing.js":"3","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/auth/Login.js":"4","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/positions/PositionsByCurrency.js":"5","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/auth.js":"6","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryFiatData.js":"7","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/CurrencyLogos.js":"8","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/TotalChart.js":"9","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/Menu.js":"10","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/TotalChartDiagramm.js":"11","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Twenty4hChangeInvestmentTotal.js":"12","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Twenty4hChangeInvestmentByCurrencies.js":"13","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/SparkLineCharts.js":"14","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/currencies.js":"15","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/Alert.js":"16","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/input/AddCrypto.js":"17","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/Fiat.js":"18","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/RemoveCryptoQuery.js":"19","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/OverviewCurrencies.js":"20","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Twenty4hChangeByCurrency.js":"21","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Overview.js":"22","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/positions.js":"23","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/Navbar.js":"24","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/AccountIcon.js":"25","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryCryptoData.js":"26","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/input/DeductCrypto.js":"27","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/utils/setAuthToken.js":"28","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/OverviewTotal.js":"29","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/SparkLine.js":"30","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryDateData.js":"31","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/user.js":"32","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/ChangeMinMax.js":"33","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/auth/Register.js":"34","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/index.js":"35","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxIframe.js":"36","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/HeroImage.js":"37"},{"size":8397,"mtime":1612193163924,"results":"38","hashOfConfig":"39"},{"size":641,"mtime":1612202066511,"results":"40","hashOfConfig":"39"},{"size":7746,"mtime":1611959296562,"results":"41","hashOfConfig":"39"},{"size":1923,"mtime":1611972542674,"results":"42","hashOfConfig":"39"},{"size":4659,"mtime":1611883286240,"results":"43","hashOfConfig":"39"},{"size":957,"mtime":1609170003658,"results":"44","hashOfConfig":"39"},{"size":1319,"mtime":1610827508225,"results":"45","hashOfConfig":"39"},{"size":1115,"mtime":1611692214697,"results":"46","hashOfConfig":"39"},{"size":3358,"mtime":1611882739336,"results":"47","hashOfConfig":"39"},{"size":745,"mtime":1611700229225,"results":"48","hashOfConfig":"39"},{"size":7207,"mtime":1611589608395,"results":"49","hashOfConfig":"39"},{"size":508,"mtime":1610834986464,"results":"50","hashOfConfig":"39"},{"size":1785,"mtime":1610834901540,"results":"51","hashOfConfig":"39"},{"size":1070,"mtime":1610396805951,"results":"52","hashOfConfig":"39"},{"size":4866,"mtime":1611100607046,"results":"53","hashOfConfig":"39"},{"size":304,"mtime":1609170003658,"results":"54","hashOfConfig":"39"},{"size":5523,"mtime":1611703697770,"results":"55","hashOfConfig":"39"},{"size":349,"mtime":1611970344696,"results":"56","hashOfConfig":"39"},{"size":1613,"mtime":1611518629441,"results":"57","hashOfConfig":"39"},{"size":8798,"mtime":1612228718956,"results":"58","hashOfConfig":"39"},{"size":1565,"mtime":1611173535328,"results":"59","hashOfConfig":"39"},{"size":9289,"mtime":1612229085253,"results":"60","hashOfConfig":"39"},{"size":505,"mtime":1611417954959,"results":"61","hashOfConfig":"39"},{"size":4742,"mtime":1612041086909,"results":"62","hashOfConfig":"39"},{"size":348,"mtime":1611697412585,"results":"63","hashOfConfig":"39"},{"size":7440,"mtime":1612216861315,"results":"64","hashOfConfig":"39"},{"size":6369,"mtime":1611703712606,"results":"65","hashOfConfig":"39"},{"size":453,"mtime":1609170003662,"results":"66","hashOfConfig":"39"},{"size":4808,"mtime":1611706968838,"results":"67","hashOfConfig":"39"},{"size":2953,"mtime":1610555375921,"results":"68","hashOfConfig":"39"},{"size":1098,"mtime":1611843382134,"results":"69","hashOfConfig":"39"},{"size":433,"mtime":1609170003658,"results":"70","hashOfConfig":"39"},{"size":1466,"mtime":1611158442168,"results":"71","hashOfConfig":"39"},{"size":2232,"mtime":1610814403131,"results":"72","hashOfConfig":"39"},{"size":290,"mtime":1611970343672,"results":"73","hashOfConfig":"39"},{"size":1365,"mtime":1612126010814,"results":"74","hashOfConfig":"39"},{"size":295,"mtime":1612023103599,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},"1v98ubu",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"79"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"79"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"79"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"79"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"97"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"111"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"79"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"97"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"108"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"120"},"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/App.js",["169","170","171"],"import React, { Fragment, useState, useEffect, useRef } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  withRouter,\n  useHistory,\n  Redirect,\n} from \"react-router-dom\";\n\nimport { createPosition } from \"./actions/positions\";\nimport { getCurrenciesNames } from \"./auxiliary/auxiliaryCryptoData\";\nimport { getLatestCryptoData } from \"./actions/currencies\";\nimport { loadUser } from \"./auxiliary/auxiliaryUserData\";\nimport { signin } from \"./auxiliary/auxiliaryUserData\";\nimport { signout } from \"./auxiliary/auxiliaryUserData\";\nimport { signup } from \"./auxiliary/auxiliaryUserData\";\nimport { getFiatExchangeRates } from \"./actions/currencies\";\nimport { getCurrentDate } from \"./auxiliary/auxiliaryDateData\";\n\nimport Navbar from \"./components/navbar/Navbar\";\nimport Landing from \"./components/layout/Landing\";\nimport Login from \"./components/auth/Login\";\nimport Register from \"./components/auth/Register\";\n\nimport AddCrypto from \"./components/input/AddCrypto\";\nimport DeductCrypto from \"./components/input/DeductCrypto\";\n\nimport PositionsByCurrency from \"./components/positions/PositionsByCurrency\";\n// import PositionChart from \"./components/positions/PositionChart\";\n\nimport Alert from \"./components/layout/Alert\";\n\nimport HeroImage from \"./components/layout/HeroImage\";\n\nimport \"./App.scss\";\nimport \"./auxiliary/auxIframe.js\";\n\nconst updateCryptoCurrenciesState = async (\n  logedin,\n  fiat,\n  triggerAlert,\n  setCryptoCurrencies,\n  setCurrencyNames\n) => {\n  if (logedin) {\n    setInterval(() => {\n      update();\n    }, 120000);\n\n    const update = async () => {\n      const userObj = await loadUser();\n\n      const currencyNames = getCurrenciesNames(userObj);\n\n      setCurrencyNames(currencyNames);\n\n      const crypto = await getLatestCryptoData(currencyNames, fiat.current);\n      if (crypto instanceof Error) {\n        // triggerAlert(\"Something went wrong\", \"danger\");\n        triggerAlert(crypto.message, \"danger\");\n      } else {\n        setCryptoCurrencies(crypto);\n      }\n    };\n\n    update();\n  }\n};\n\nconst App = () => {\n  const [user, setUser] = useState({});\n\n  const [logedin, setLogedin] = useState(false);\n\n  const [alert, setAlert] = useState({});\n\n  const [cryptoCurrencies, setCryptoCurrencies] = useState({});\n\n  const [exchangeRates, setExchangeRate] = useState({});\n\n  const [currencyNames, setCurrencyNames] = useState([]);\n\n  const fiat = useRef(\"EUR\");\n\n  const fiatSymbol = useRef(\"€\");\n\n  let history = useHistory();\n\n  useEffect(() => {\n    loadUserObj();\n  }, []);\n\n  useEffect(() => {\n    updateCryptoCurrenciesState(\n      logedin,\n      fiat,\n      triggerAlert,\n      setCryptoCurrencies,\n      setCurrencyNames\n    );\n    updateExchangeRateState();\n  }, [logedin]);\n\n  const updateExchangeRateState = async () => {\n    const date = getCurrentDate();\n\n    const exchangeObj = await getFiatExchangeRates(date);\n\n    if (exchangeObj instanceof Error) {\n      triggerAlert(exchangeObj.message, \"danger\");\n    } else {\n      setExchangeRate(exchangeObj);\n    }\n  };\n\n  const setFiatCurrency = (e) => {\n    fiat.current = e.target.value;\n\n    switch (e.target.value) {\n      case \"EUR\":\n        fiatSymbol.current = \"€\";\n        break;\n      case \"USD\":\n        fiatSymbol.current = \"$\";\n        break;\n      default:\n    }\n\n    updateCryptoCurrenciesState(\n      logedin,\n      fiat,\n      triggerAlert,\n      setCryptoCurrencies,\n      setCurrencyNames\n    );\n  };\n\n  const makePosition = async (formData) => {\n    const position = await createPosition(formData);\n    if (position instanceof Error) {\n      triggerAlert(position.response.data.errors.msg, \"danger\");\n    } else {\n      position.data.amount < 0\n        ? triggerAlert(\"Amount deducted\", \"success\")\n        : triggerAlert(\"Position added\", \"success\");\n      setUser({ ...user.positions.unshift(position.data) });\n      updateCryptoCurrenciesState(\n        logedin,\n        fiat,\n        triggerAlert,\n        setCryptoCurrencies,\n        setCurrencyNames\n      );\n    }\n  };\n\n  const login = async (email, password) => {\n    const token = await signin(email, password);\n    if (token instanceof Error) {\n      triggerAlert(token.response.data.errors.msg, \"danger\");\n    } else {\n      triggerAlert(\"You have sucessfully logged in!\", \"success\");\n      loadUserObj();\n      // return <Redirect to=\"/\" />;\n      // history.push(\"/login\");\n      return token;\n    }\n  };\n\n  const loadUserObj = async () => {\n    const userObj = await loadUser();\n    if (userObj instanceof Error) {\n      triggerAlert(userObj.response.data.errors.msg, \"danger\");\n      return;\n    } else if (userObj) {\n      setUser(userObj);\n      setLogedin(true);\n      return <Redirect to=\"/\" />;\n    } else if (!userObj) {\n      // history.push(\"/login\");\n      triggerAlert(\n        \"Welcome! You are currently logged out. Log in or sign up!\",\n        \"success\"\n      );\n    }\n  };\n\n  const logout = () => {\n    signout();\n    setUser({});\n    setLogedin(false);\n    // history.push(\"/login\");\n    triggerAlert(\"You are now logged out.\", \"success\");\n  };\n\n  const register = async (email, password, password2) => {\n    const token = await signup(email, password, password2);\n    if (token instanceof Error) {\n      triggerAlert(token.response.data.errors.msg, \"danger\");\n    } else {\n      triggerAlert(\"Welcome Hodler! Enter your portfolio!\", \"success\");\n      loadUserObj();\n    }\n  };\n\n  const triggerAlert = (msg, alertType) => {\n    setAlert({\n      message: msg,\n      type: alertType,\n    });\n    setTimeout(() => setAlert({}), 20000);\n  };\n\n  const removeAlert = () => setAlert({});\n\n  return (\n    <Router>\n      <Fragment>\n        <Navbar\n          logout={logout}\n          logedin={logedin}\n          setFiatCurrency={setFiatCurrency}\n        />\n        <Alert alert={alert} removeAlert={removeAlert} />\n\n        <Switch>\n          {logedin ? (\n            <Route\n              exact\n              path=\"/\"\n              render={() => (\n                <Landing\n                  user={user}\n                  cryptoCurrencies={cryptoCurrencies}\n                  exchangeRates={exchangeRates}\n                  logedin={logedin}\n                  fiat={fiat}\n                  fiatSymbol={fiatSymbol}\n                  triggerAlert={triggerAlert}\n                />\n              )}\n            />\n          ) : (\n            <Route exact path=\"/\" render={() => <HeroImage />} />\n          )}\n\n          {!logedin && (\n            <Route\n              exact\n              path=\"/login\"\n              render={() => <Login login={login} logedin={logedin} />}\n            />\n          )}\n\n          {!logedin && (\n            <Route\n              exact\n              path=\"/register\"\n              render={() => <Register register={register} logedin={logedin} />}\n            />\n          )}\n\n          {logedin && (\n            <Route\n              exact\n              path=\"/add_crypto\"\n              render={() => (\n                <AddCrypto\n                  fiat={fiat}\n                  logedin={logedin}\n                  makePosition={makePosition}\n                  loadUserObj={loadUserObj}\n                  updateCryptoCurrenciesState={updateCryptoCurrenciesState}\n                  triggerAlert={triggerAlert}\n                  setCryptoCurrencies={setCryptoCurrencies}\n                  setCurrencyNames={setCurrencyNames}\n                />\n              )}\n            />\n          )}\n\n          {logedin && (\n            <Route\n              exact\n              path=\"/deduct_crypto\"\n              render={() => (\n                <DeductCrypto\n                  user={user}\n                  currencyNames={currencyNames}\n                  makePosition={makePosition}\n                  loadUserObj={loadUserObj}\n                  triggerAlert={triggerAlert}\n                  setUser={setUser}\n                  setCurrencyNames={setCurrencyNames}\n                />\n              )}\n            />\n          )}\n\n          {logedin && (\n            <Route\n              exact\n              path=\"/position\"\n              render={() => (\n                <PositionsByCurrency\n                  cryptoCurrencies={cryptoCurrencies}\n                  fiat={fiat}\n                  fiatSymbol={fiatSymbol}\n                />\n              )}\n            />\n          )}\n        </Switch>\n      </Fragment>\n    </Router>\n  );\n};\n\nexport default withRouter(App);\n// export default App;\n",["172","173"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryUserData.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/Landing.js",["174","175"],"import React, { Fragment, useState, useEffect, useCallback } from \"react\";\nimport { getMarketChartsCrypto2 } from \"../../actions/currencies\";\nimport { getCurrenciesNames } from \"../../auxiliary/auxiliaryCryptoData\";\nimport Overview from \"../overview/Overview\";\nimport TotalChart from \"../charts/TotalChart\";\n\nfunction Landing({\n  user,\n  cryptoCurrencies,\n  exchangeRates,\n  logedin,\n  fiat,\n  fiatSymbol,\n  triggerAlert,\n}) {\n  const [renderOverview, setRenderOverview] = useState(true);\n  const [renderTotalChart, setRenderTotalChart] = useState(false);\n\n  const toggleView = useCallback(() => {\n    if (renderOverview) {\n      setRenderOverview(false);\n      setRenderTotalChart(true);\n      return;\n    } else {\n      setRenderOverview(true);\n      setRenderTotalChart(false);\n    }\n  }, [renderOverview]);\n\n  const [origin, setOrigin] = useState(\"\");\n  const [currency, setCurrency] = useState(\"\");\n  const [originAndCurrency, setOriginAndCurency] = useState([]);\n\n  const updateOriginAndCurrencyState = useCallback((origin, currency) => {\n    setOrigin(origin);\n    setCurrency(currency);\n    setOriginAndCurency([origin, currency]);\n  }, []);\n\n  // on click duration (day, week, etc.) in @components/charts/TotalChart.js originAndCurrency is updated\n  // currency in originAndCurrency state gets _fiat.current appendix\n  // in order to update originAndCurrency state also on switch fiat the following useEffect hook is employed\n  // currency needs correct fiat.current appendix for cumulativeValueInvestment() @auxiliary/auxiliaryCryptoData.js to work properly\n  useEffect(() => {\n    if (currency !== \"all_currencies\") {\n      const curr = currency.split(\"_\")[0];\n      setOriginAndCurency([origin, curr + \"_\" + fiat.current]);\n    }\n  }, [fiat.current]);\n\n  const [marketChartTotal, setMarketChartTotal] = useState({});\n  const [marketChartDay, setMarketChartDay] = useState({});\n  const [marketChartWeek, setMarketChartWeek] = useState({});\n  const [marketChartMonth, setMarketChartMonth] = useState({});\n  const [currentMarketChart, setCurrentMarketChart] = useState({});\n\n  const [loaded, setLoaded] = useState(false);\n\n  const isEmpty = (obj) => Object.keys(obj).length === 0;\n\n  const objIncludesFiat = (obj) => {\n    let returnValue = \"\";\n    Object.keys(obj).forEach((el) => {\n      if (el.includes(fiat.current)) {\n        returnValue = true;\n        return;\n      }\n    });\n    // console.log(returnValue);\n    return returnValue;\n  };\n\n  const retrieveAttributesFromObject = (obj) => {\n    const returnObj = {};\n    for (const [key, value] of Object.entries(obj)) {\n      if (key.includes(fiat.current)) returnObj[key] = value;\n    }\n    return returnObj;\n  };\n\n  const upDateMarketChartState = (duration) => {\n    // console.log(\"upDateMarketChartState\");\n    switch (duration) {\n      case \"all\":\n        // console.log(marketChartTotal);\n        isEmpty(marketChartTotal) || !objIncludesFiat(marketChartTotal)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(\n              retrieveAttributesFromObject(marketChartTotal)\n            );\n        // console.log(marketChartTotal);\n        break;\n      case \"day\":\n        isEmpty(marketChartDay) || !objIncludesFiat(marketChartDay)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(retrieveAttributesFromObject(marketChartDay));\n        // console.log(marketChartDay);\n        break;\n      case \"week\":\n        isEmpty(marketChartWeek) || !objIncludesFiat(marketChartWeek)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(\n              retrieveAttributesFromObject(marketChartWeek)\n            );\n        break;\n      case \"month\":\n        isEmpty(marketChartMonth) || !objIncludesFiat(marketChartMonth)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(\n              retrieveAttributesFromObject(marketChartMonth)\n            );\n        break;\n      default:\n    }\n\n    function loadChartData(duration) {\n      setLoaded(false);\n      let currenciesObject = {};\n      const currencyNamesArr = getCurrenciesNames(user);\n\n      // api request is beeing conducted in accordance with the number of currencies\n      // if successful the retured data is beeing stored as arrays in currenciesObject (key = currencyName, value = array)\n      // if the number of attributes matches the number of currencies marketCharts and loaded state are updated\n      // if an error is returned by api the state loaded is set to true (so the empty diagram is beeing displayed) and an error message appears\n      currencyNamesArr.forEach(async (currencyName) => {\n        let currentPrice = 0;\n        cryptoCurrencies.data.forEach((obj) => {\n          if (obj.id === currencyName) currentPrice = obj.current_price;\n        });\n        const res = await getMarketChartsCrypto2(\n          user,\n          currencyName,\n          fiat,\n          currentPrice,\n          duration\n        );\n\n        if (res instanceof Error) {\n          setLoaded(true);\n          res.response\n            ? triggerAlert(res.response.data)\n            : triggerAlert(\"something went wrong\");\n\n          // this makes sure that currenciesObject only gets attributes if no error occurs so those attributes are proper arrays\n          // otherwhise attributes are non iterable error objects -> a arr.forEach() will throw an exception later in the code and break the app\n          // if api returns errors, currenciesObject remains incomplete and marketCharts state will not be updated\n          // so after the arr.forEach() is done marketCharts state either has valid data or is an empty object (which results in an empty diagram)\n        } else {\n          currenciesObject[currencyName + \"_\" + fiat.current] = res;\n          if (\n            Object.keys(currenciesObject).length === currencyNamesArr.length\n          ) {\n            switch (duration) {\n              case \"all\":\n                setMarketChartTotal(\n                  Object.assign(marketChartTotal, currenciesObject)\n                );\n                break;\n              case \"day\":\n                setMarketChartDay(\n                  Object.assign(marketChartDay, currenciesObject)\n                );\n                break;\n              case \"week\":\n                setMarketChartWeek(\n                  Object.assign(marketChartWeek, currenciesObject)\n                );\n\n                break;\n              case \"month\":\n                setMarketChartMonth(\n                  Object.assign(marketChartMonth, currenciesObject)\n                );\n                break;\n              default:\n            }\n\n            setCurrentMarketChart(currenciesObject);\n\n            setLoaded(true);\n          }\n        }\n      });\n    }\n  };\n\n  return (\n    <Fragment>\n      {renderOverview && (\n        <Overview\n          user={user}\n          cryptoCurrencies={cryptoCurrencies}\n          exchangeRates={exchangeRates}\n          logedin={logedin}\n          fiat={fiat}\n          fiatSymbol={fiatSymbol}\n          renderOverview={renderOverview}\n          updateOriginAndCurrencyState={updateOriginAndCurrencyState}\n          toggleView={toggleView}\n        />\n      )}\n      {renderTotalChart && (\n        <TotalChart\n          user={user}\n          cryptoCurrencies={cryptoCurrencies}\n          marketChartTotal={marketChartTotal}\n          currentMarketChart={currentMarketChart}\n          logedin={logedin}\n          triggerAlert={triggerAlert}\n          toggleView={toggleView}\n          originAndCurrency={originAndCurrency}\n          loaded={loaded}\n          logedin={logedin}\n          fiat={fiat}\n          fiatSymbol={fiatSymbol}\n          upDateMarketChartState={upDateMarketChartState}\n        />\n      )}\n    </Fragment>\n  );\n}\n\nexport default Landing;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/auth/Login.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/positions/PositionsByCurrency.js",["176"],"import React, { Fragment } from \"react\";\nimport CurrencyLogos from \"../layout/CurrencyLogos\";\nimport { Link } from \"react-router-dom\";\n// import { removePosition } from \"../../actions/positions\";\nimport { getCurrencyPositions } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { useLocation } from \"react-router-dom\";\nimport { getAbbrevation } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getInitialValue } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getInitialValuePurchase } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getImage } from \"../../auxiliary/auxiliaryCryptoData\";\n\nfunction PositionsByCurrency({ cryptoCurrencies, fiat, fiatSymbol }) {\n  const data = useLocation();\n\n  const transformDate = (val) => {\n    const date = new Date(val);\n    const day =\n      date.getDate() < 10 ? \"0\" + date.getDate() : \"\" + date.getDate();\n    const month = date.toLocaleString(\"default\", { month: \"long\" });\n    const year = date.getFullYear();\n    const dateString = `${day}. ${month} ${year}`;\n    return dateString;\n  };\n\n  const sortPosition = (positionsArray) =>\n    positionsArray.sort(\n      (a, b) => Date.parse(b.date_of_purchase) - Date.parse(a.date_of_purchase)\n    );\n\n  const getSortedPositions = () => {\n    if (data.state.currency === \"all_currencies\") {\n      return sortPosition(data.state.user.positions);\n    } else {\n      return sortPosition(\n        getCurrencyPositions(data.state.user, data.state.currency)\n      );\n    }\n  };\n\n  // const deletePosition = (id) => {\n  //   removePosition(id);\n  // };\n\n  return (\n    <div id=\"positions_container\">\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <div style={{ display: \"flex\" }}>\n          <CurrencyLogos\n            cryptoCurrencies={cryptoCurrencies}\n            currency={data.state.currency}\n            origin={\"OverviewTotal\"}\n          />\n          <div style={{ marginLeft: \"1rem\" }}>transaction record</div>\n        </div>\n        <div id=\"toggle_view_ledger\">\n          <Link to=\"/\">\n            <button type=\"button\" class=\"btn btn-secondary\">\n              <i class=\"fas fa-angle-double-left\"></i> back to overview\n            </button>\n          </Link>\n        </div>\n      </div>\n\n      <table className=\"table table-striped\">\n        <tr>\n          <th></th>\n          <th>transaction date</th>\n          <th>amount</th>\n          <th>value</th>\n        </tr>\n        <tbody>\n          {getSortedPositions().map((position) => {\n            return (\n              <tr\n                className=\"clickable\"\n                style={{ color: position.amount < 0 ? \"red\" : \"green\" }}\n              >\n                <th></th>\n                <td>{transformDate(position.date_of_purchase)}</td>\n                <td>\n                  <img\n                    className=\"crypto_image\"\n                    src={getImage(cryptoCurrencies, position.crypto_currency)}\n                    alt={position.crypto_currency}\n                  />\n                  {position.amount}{\" \"}\n                  {getAbbrevation(cryptoCurrencies, position.crypto_currency)}\n                </td>\n                <td>\n                  {position[`price_${fiat.current}`].toFixed(2)}{\" \"}\n                  {fiatSymbol.current}\n                </td>\n                <td>\n                  {/* <div\n                    className=\"delete_ledger_entry\"\n                    // onClick={() => deletePosition(position._id)}\n                  >\n                    <i class=\"fas fa-trash-alt\"></i>\n                  </div> */}\n                </td>\n              </tr>\n            );\n          })}\n          <tr id=\"overview_total\">\n            <td>Total</td>\n            <th></th>\n            {data.state.currency === \"all_currencies\" ? (\n              <td></td>\n            ) : (\n              <td>\n                {getAmount(data.state.user, data.state.currency).toFixed(3)}{\" \"}\n                {getAbbrevation(cryptoCurrencies, data.state.currency)}\n              </td>\n            )}\n            {data.state.currency === \"all_currencies\" ? (\n              <td>\n                {getInitialValuePurchase(data.state.user, fiat).toFixed(2)}{\" \"}\n                {fiatSymbol.current}\n              </td>\n            ) : (\n              <td>\n                {getInitialValue(\n                  data.state.user,\n                  data.state.currency,\n                  fiat\n                ).toFixed(2)}{\" \"}\n                {fiatSymbol.current}\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default PositionsByCurrency;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/auth.js",[],["177","178"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryFiatData.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/CurrencyLogos.js",[],["179","180"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/TotalChart.js",["181","182","183"],"import React, { Fragment, useState, useEffect } from \"react\";\nimport TotalChartDiagramm from \"./TotalChartDiagramm\";\nimport ChangeMinMax from \"./ChangeMinMax\";\nimport CurrencyLogos from \"../layout/CurrencyLogos\";\n// import { checkDuration } from \"../../auxiliary/auxiliaryDateData\";\n\nconst TotalChart = ({\n  user,\n  cryptoCurrencies,\n  marketChartTotal,\n  currentMarketChart,\n  toggleView,\n  originAndCurrency,\n  loaded,\n  upDateMarketChartState,\n  logedin,\n  fiat,\n  fiatSymbol,\n}) => {\n  const [duration, setDuration] = useState(\"all\");\n\n  useEffect(() => {\n    if (logedin) upDateMarketChartState(duration);\n    // console.log(\"useEffect\");\n  }, [user, fiat.current]);\n\n  const handleClick = (e) => {\n    setDuration(e.target.innerHTML);\n    upDateMarketChartState(e.target.innerHTML);\n    // console.log(e.target.innerHTML);\n    // console.log(duration);\n  };\n\n  const [resultArray, setResultArray] = useState([]);\n\n  const updateResultArrayState = (arr) => setResultArray(arr);\n\n  const [origin, currency] = originAndCurrency;\n\n  // console.log(currency);\n\n  return !loaded ? (\n    <div>Loading ...</div>\n  ) : (\n    <div id=\"charts_container\">\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <div id=\"currency_logos\">\n          <CurrencyLogos\n            cryptoCurrencies={cryptoCurrencies}\n            currency={currency}\n          />\n        </div>\n        <div\n          id=\"toggle_view_charts\"\n          style={{ marginBottom: \"2rem\", marginRight: \"1rem\" }}\n          onClick={toggleView}\n        >\n          <button type=\"button\" class=\"btn btn-secondary\">\n            <i class=\"fas fa-angle-double-left\"></i> back to overview\n          </button>\n        </div>\n      </div>\n\n      <ChangeMinMax dataArray={resultArray} fiatSymbol={fiatSymbol} />\n      <div id=\"total_chart_container\">\n        <div id=\"durations_container\">\n          <div\n            id={duration === \"day\" && \"duration\"}\n            className=\"durations\"\n            onClick={(e) => handleClick(e)}\n          >\n            day\n          </div>\n          <div\n            id={duration === \"week\" && \"duration\"}\n            className=\"durations\"\n            onClick={(e) => handleClick(e)}\n            // style={{\n            //   display: checkDuration(marketChartTotal) >= 7 ? \"block\" : \"none\",\n            // }}\n          >\n            week\n          </div>\n          <div\n            id={duration === \"month\" && \"duration\"}\n            className=\"durations\"\n            onClick={(e) => handleClick(e)}\n            // style={{\n            //   display: checkDuration(marketChartTotal) >= 30 ? \"block\" : \"none\",\n            // }}\n          >\n            month\n          </div>\n          <div\n            id={duration === \"all\" && \"duration\"}\n            className=\"durations\"\n            onClick={(e) => handleClick(e)}\n          >\n            all\n          </div>\n        </div>\n        <div>\n          <TotalChartDiagramm\n            currentMarketChart={currentMarketChart}\n            positions={user.positions}\n            fiat={fiat}\n            originAndCurrency={originAndCurrency}\n            duration={duration}\n            updateResultArrayState={updateResultArrayState}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TotalChart;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/Menu.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/TotalChartDiagramm.js",["184","185","186","187","188","189"],"import React, { Fragment, useState, useEffect } from \"react\";\n// import ChangeMinMax from \"./ChangeMinMax\";\nimport { Line } from \"react-chartjs-2\";\nimport { cumulativeValueInvestment } from \"../../auxiliary/auxiliaryCryptoData\";\n\nconst TotalChartDiagramm = ({\n  positions,\n  currentMarketChart,\n  fiat,\n  originAndCurrency,\n  duration,\n  updateResultArrayState,\n}) => {\n  // console.log(currentMarketChart);\n  const [nameArray, setNameArray] = useState(\"\");\n\n  const [labelStr, setLabelStr] = useState(\"\");\n\n  const [resultArray, setResultArray] = useState([]);\n\n  const [timeStampArray, setTimeStampArray] = useState([]);\n\n  const [origin, currency] = originAndCurrency;\n\n  useEffect(() => {\n    console.log(\"useEffect\");\n    switch (origin) {\n      case \"initial_value\":\n        setNameArray(\"initialValueArray\");\n        // setLabelStr(`Value of ${currency} in ${fiat.current}`);\n        break;\n      case \"current_value\":\n        setNameArray(\"currentValueArray\");\n        // setLabelStr(`Value of ${currency} in ${fiat.current}`);\n        break;\n      case \"balance\":\n        setNameArray(\"balanceArray\");\n        // setLabelStr(`Value of ${currency} in ${fiat.current}`);\n        break;\n      case \"roi\":\n        setNameArray(\"roiArray\");\n        // setLabelStr(`ROI in %`);\n        break;\n      default:\n    }\n  }, []);\n\n  useEffect(() => {\n    origin === \"roi\"\n      ? setLabelStr(`ROI in %`)\n      : setLabelStr(\n          `Value of ${\n            currency === \"all_currencies\"\n              ? \"this portfolio\"\n              : currency.split(\"_\")[0]\n          } in ${fiat.current}`\n        );\n  }, [fiat.current]);\n\n  useEffect(() => {\n    const currenciesTotalObjectsArray = [];\n\n    const timeStamps = [];\n\n    let currencyArr = [];\n\n    currency === \"all_currencies\"\n      ? (currencyArr = Object.keys(currentMarketChart))\n      : currencyArr.push(currency);\n\n    // the following 2 functions push objects with initialValueArray, currentValueArray, balanceArray, roiArray and timeStampArray for every currency\n    // in currenciesTotalObjectsArray\n    const totalValueInvestment = (obj) => {\n      currenciesTotalObjectsArray.push(obj);\n    };\n\n    currencyArr.forEach((currency) => {\n      // console.log(currency);\n      totalValueInvestment(\n        cumulativeValueInvestment(\n          positions,\n          currentMarketChart[currency],\n          currency,\n          fiat\n        )\n      );\n    });\n\n    // console.log(currency);\n\n    // not all currency price arrays as returned by the api have the same length --> this results in the last values of the calculated total price array being too low\n    // this makes sure that all the indivual currency arrays from which totals are beeing calculated have the same length\n    // (which corresponds with the length of the shortest array)\n    let lengthArr = [];\n\n    // puts length of each array in object in array\n    currenciesTotalObjectsArray.forEach(\n      (obj, index) => (lengthArr[index] = obj.initialValueArray.length)\n    );\n\n    // gets the shortest array length\n    const minLength = Math.min(...lengthArr);\n\n    // sets length of arrays in object to the shortest length\n    currenciesTotalObjectsArray.map((obj) => {\n      for (const [key, value] of Object.entries(obj)) {\n        value.length = minLength;\n      }\n    });\n\n    // retrieves timeStamps from array of objects with initialValueArray, currentValueArray, balanceArray, roiArray and timeStampArray for every currency\n    // those objects are beeing created in cumulativeValueInvestment() @auxiliaryCryptoData.js\n    // some of these arrays contain empty slots (for details see comments in cumulativeValueInvestment() in @auxiliaryCryptoData.js)\n    // those have to be removed, else the line diagrams display a lot of null values at the beginning\n    // hence filter is employed\n    currency !== \"all_currencies\"\n      ? currenciesTotalObjectsArray.forEach((obj) => {\n          const filtered = obj.timeStampArray.filter((el) => el !== undefined);\n          filtered.forEach((el, index) => (timeStamps[index] = el));\n        })\n      : // if total is to be displayed the above causes problems so in that case no filter is employed\n        currenciesTotalObjectsArray.forEach((obj) => {\n          obj.timeStampArray.forEach((el, index) => (timeStamps[index] = el));\n        });\n\n    // the following code sums up initial_value, current_value, balance of every individual currency so that the totals of these attributes can be displayed in a chart\n    // it also calculates the development of roi over time\n    const resArray = new Array(timeStamps.length).fill(0);\n\n    if (nameArray) {\n      const initValResArray = new Array(timeStamps.length).fill(0);\n      const currValResArray = new Array(timeStamps.length).fill(0);\n\n      currenciesTotalObjectsArray.forEach((obj) => {\n        if (nameArray === \"roiArray\") {\n          obj.initialValueArray.forEach((el, index) => {\n            initValResArray[index] += el;\n          });\n          obj.currentValueArray.forEach(\n            (el, index) => (currValResArray[index] += el)\n          );\n          obj.roiArray.forEach(\n            (el, index) =>\n              (resArray[index] =\n                (currValResArray[index] * 100) / initValResArray[index] - 100)\n          );\n        } else {\n          if (currency === \"all_currencies\") {\n            obj[nameArray].forEach((el, index) => (resArray[index] += el));\n          } else {\n            // this removes undefined elements from arrays (why are there undefined elements in some arrays? see explanation above for empty slots in timeStampArray)\n            const filtered = obj[nameArray].filter((el) => el !== undefined);\n            filtered.forEach((el, index) => (resArray[index] += el));\n          }\n        }\n      });\n    }\n    setResultArray(resArray);\n    setTimeStampArray(timeStamps);\n\n    updateResultArrayState(resArray);\n  }, [nameArray, currentMarketChart, duration]);\n\n  const getUnit = () => {\n    switch (duration) {\n      case \"day\":\n        return \"hour\";\n      case \"week\":\n        return \"day\";\n      case \"month\":\n        return \"week\";\n      case \"all\":\n        return \"month\";\n    }\n  };\n\n  return (\n    <Fragment>\n      <div>\n        <Line\n          data={{\n            labels: timeStampArray,\n            datasets: [\n              {\n                label: labelStr,\n                data: resultArray,\n              },\n            ],\n          }}\n          // width={500}\n          height={500}\n          options={{\n            maintainAspectRatio: false,\n            scales: {\n              yAxes: [\n                {\n                  scaleLabel: {\n                    display: true,\n                    labelString: labelStr,\n                  },\n                },\n              ],\n              xAxes: [\n                {\n                  type: \"time\",\n                  time: {\n                    unit: getUnit(),\n                    displayFormats: {\n                      quarter: \"MMM YYYY\",\n                    },\n                    distribution: \"series\",\n                  },\n                },\n              ],\n            },\n          }}\n        />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default TotalChartDiagramm;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Twenty4hChangeInvestmentTotal.js",[],["190","191"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Twenty4hChangeInvestmentByCurrencies.js",[],["192","193"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/SparkLineCharts.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/currencies.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/Alert.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/input/AddCrypto.js",[],["194","195"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/Fiat.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/RemoveCryptoQuery.js",[],["196","197"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/OverviewCurrencies.js",["198","199"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Twenty4hChangeByCurrency.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Overview.js",["200","201","202","203","204"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/positions.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/Navbar.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/AccountIcon.js",["205"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryCryptoData.js",["206","207","208","209","210"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/input/DeductCrypto.js",["211","212"],"import React, { Fragment, useState, useEffect } from \"react\";\nimport RemoveCryptoQuery from \"../layout/RemoveCryptoQuery\";\nimport { Link } from \"react-router-dom\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getCurrenciesNames } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getInitialValue } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { convertFiat } from \"../../auxiliary/auxiliaryFiatData\";\n\nconst DeductCrypto = ({\n  user,\n  currencyNames,\n  makePosition,\n  loadUserObj,\n  setUser,\n  triggerAlert,\n  setCurrencyNames,\n}) => {\n  let [formData, setFormData] = useState({\n    crypto_currency: \"\",\n    amount: \"\",\n    date_of_purchase: \"\",\n  });\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const { crypto_currency, amount, date_of_purchase } = formData;\n\n  const [renderSafetyQuery, setRenderSafetyQuery] = useState(false);\n\n  const removeSavetyQuery = () => setRenderSafetyQuery(false);\n\n  // const [currencyNames, setCurrencyNames] = useState([]);\n\n  // useEffect(() => {\n  //   const namesArr = getCurrenciesNames(user);\n  //   namesArr.unshift(\"\");\n  //   setCurrencyNames(namesArr);\n  // }, []);\n\n  const [currency, setCurrency] = useState(\"\");\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n\n    // user input validation\n    if (!crypto_currency) {\n      triggerAlert(\"Please select a cryptocurrency\", \"danger\");\n      return;\n    }\n\n    const currentAmount = getAmount(user, crypto_currency);\n\n    if (amount > currentAmount) {\n      triggerAlert(\n        `You currently have only ${currentAmount} unit(s) of this currency`,\n        \"danger\"\n      );\n      return;\n    }\n\n    // sets selected currency to useState so it can be used in child component (onSubmit sets it back to blank)\n    setCurrency(crypto_currency);\n\n    // renders overlay with safety query if user reduces amount of a currency to 0 (which will remove that currency from portfolio)\n    // in that case rest of code in onSubmit function doesn't execute\n    if (parseFloat(amount) === currentAmount) {\n      setRenderSafetyQuery(true);\n      return;\n    }\n\n    // value of the amount (in fiat) to be deducted from the amount of a crypto currency in the portfolio is calculated based on the median value\n    // of all positions of this currency\n    const median_price_currency_positions =\n      getInitialValue(user, crypto_currency, { current: \"EUR\" }) /\n      getAmount(user, crypto_currency);\n\n    // calculates the actual value of the deductable amount\n    const deductable_value = median_price_currency_positions * amount;\n\n    // returns an object which has actual value of deductable amount in EUR, USD and GBP\n    const convertObject = await convertFiat(\n      deductable_value,\n      \"EUR\",\n      date_of_purchase,\n      triggerAlert\n    );\n\n    // actual value of deductable amount is turned into negative\n    for (let [key, value] of Object.entries(convertObject)) {\n      convertObject[key] = value * -1;\n    }\n    // sets content of convertObject which is the negtive value of deductable amount for attributes EUR, USD and GBP to the formData Object\n    formData = Object.assign(formData, convertObject);\n\n    // amount is beeing turned into negative so the corresponding position has a negative amount property\n    formData.amount = parseFloat(formData.amount) * -1;\n\n    await makePosition(formData);\n\n    // sets form fields back to blank\n    makeBlankForm();\n\n    // reloads user object which is now updated with the deductable position\n    loadUserObj();\n  };\n\n  const makeBlankForm = () =>\n    setFormData({\n      crypto_currency: \"\",\n      amount: \"\",\n      date_of_purchase: \"\",\n    });\n\n  return (\n    <Fragment>\n      <div style={{ display: renderSafetyQuery ? \"block\" : \"none\" }}>\n        <RemoveCryptoQuery\n          user={user}\n          currency={currency}\n          currencyNames={currencyNames}\n          setUser={setUser}\n          removeSavetyQuery={removeSavetyQuery}\n          triggerAlert={triggerAlert}\n          makeBlankForm={makeBlankForm}\n          setCurrencyNames={setCurrencyNames}\n        />\n      </div>\n      <div id=\"toggle_view_ledger\">\n        <Link to=\"/\">\n          <button type=\"button\" class=\"btn btn-secondary\">\n            <i class=\"fas fa-angle-double-left\"></i> back to overview\n          </button>\n        </Link>\n      </div>\n      <div className=\"form_container\">\n        <h3 className=\"large text-primary\">Deduct Crypto</h3>\n        <p className=\"lead\">Deduct cryptocurrency from your portfolio</p>\n        <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n          <div className=\"form-group\">\n            <div className=\"dropdown input_field\">\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                }}\n              >\n                <div>Select a cryptocurrency</div>\n                <select\n                  className=\"btn btn-outline-secondary\"\n                  name=\"crypto_currency\"\n                  style={{ position: \"absolute\", right: \"0\", width: \"50%\" }}\n                  onChange={(e) => onChange(e)}\n                >\n                  <option value={\"\"}>{\"\"}</option>\n                  {currencyNames.map((currencyName) => {\n                    return (\n                      <option value={`${currencyName}`}>{currencyName}</option>\n                    );\n                  })}\n                </select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <input\n              className=\"form-control input_field\"\n              type=\"number\"\n              placeholder=\"Amount\"\n              name=\"amount\"\n              value={amount}\n              onChange={(e) => onChange(e)}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <input\n              className=\"form-control input_field\"\n              type=\"date\"\n              name=\"date_of_purchase\"\n              value={date_of_purchase}\n              onChange={(e) => onChange(e)}\n              required\n              max={new Date().toISOString().split(\"T\")[0]}\n            />\n          </div>\n\n          <input type=\"submit\" className=\"btn btn-primary\" value=\"Deduct\" />\n        </form>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default DeductCrypto;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/utils/setAuthToken.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/OverviewTotal.js",["213","214"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport SparkLine from \"../charts/SparkLine\";\nimport Twenty4hChangeInvestmentTotal from \"./Twenty4hChangeInvestmentTotal\";\nimport CurrencyLogos from \"../layout/CurrencyLogos\";\nimport { duration7Days } from \"../../auxiliary/auxiliaryDateData\";\n\nconst OverviewTotal = ({\n  user,\n  cryptoCurrencies,\n  exchangeRates,\n  totalPurchase,\n  currentValueTotal,\n  prevCurrentValueTotal,\n  fiat,\n  prevFiat,\n  fiatSymbol,\n  get24hourChangeTotal,\n  handleClick,\n}) => {\n  // both hooks are neccessary to persist change currentValueTotal so it survives re mounting of this component\n  const [currentValueTotalChange, setCurrentValueTotalChange] = useState(\n    sessionStorage.getItem(\"change\")\n  );\n\n  useEffect(() => {\n    // makes sure that change current total is not re - calculated when user switches fiat\n    if (fiat.current === prevFiat.current) {\n      const change = (\n        currentValueTotal - prevCurrentValueTotal.current\n      ).toFixed(2);\n      // makes sure that session storage and state are only updated if it is not a re mount\n      if (!isNaN(change) && prevCurrentValueTotal.current !== 0) {\n        sessionStorage.setItem(\"change\", change);\n        setCurrentValueTotalChange(change);\n      }\n    }\n  }, [currentValueTotal]);\n\n  useEffect(() => {\n    calcChange();\n  }, [fiat.current]);\n\n  // converts change current total into the selected fiat\n  const calcChange = async () => {\n    // switch from EUR to USD\n    if (fiat.current === \"USD\" && prevFiat.current === \"EUR\") {\n      if (exchangeRates.data) {\n        setCurrentValueTotalChange(\n          (currentValueTotalChange * exchangeRates.data.rates.USD).toFixed(2)\n        );\n      }\n    }\n\n    // switch from USD to EUR\n    if (fiat.current === \"EUR\" && prevFiat.current === \"USD\") {\n      if (exchangeRates.data) {\n        setCurrentValueTotalChange(\n          (\n            currentValueTotalChange *\n            (1 / exchangeRates.data.rates.USD)\n          ).toFixed(2)\n        );\n      }\n    }\n  };\n\n  return (\n    <tr id=\"overview_total\">\n      {/* currencys and logos*/}\n      <Link\n        to={{\n          pathname: \"/position\",\n          // current_price: totalPurchase.toFixed(2),\n          state: {\n            currency: \"all_currencies\",\n            user: user,\n          },\n        }}\n      >\n        {/* <th scope=\"row\"></th> */}\n        <td>\n          {\" \"}\n          <div style={{ display: \"flex\", justifyContent: \"start\" }}>\n            <CurrencyLogos\n              cryptoCurrencies={cryptoCurrencies}\n              currency={\"all_currencies\"}\n              origin={\"OverviewTotal\"}\n            />\n          </div>\n        </td>\n      </Link>\n\n      <td>Total Portfolio</td>\n\n      {/* initial value */}\n      <td\n        className=\"clickable\"\n        onClick={\n          duration7Days(user) &&\n          (() => handleClick(\"initial_value\", \"all_currencies\"))\n        }\n      >\n        {totalPurchase.toFixed(2)} {fiatSymbol.current}\n      </td>\n\n      {/* current value */}\n      <td\n        className=\"clickable\"\n        onClick={\n          duration7Days(user) &&\n          (() => handleClick(\"current_value\", \"all_currencies\"))\n        }\n      >\n        <div className=\"change_container\">\n          <div>\n            {currentValueTotal.toFixed(2)} {fiatSymbol.current}\n          </div>\n          <div\n            className=\"change_value\"\n            style={{\n              color: currentValueTotalChange >= 0 ? \"green\" : \"red\",\n            }}\n          >\n            {currentValueTotalChange && currentValueTotalChange !== 0\n              ? currentValueTotalChange\n              : 0}{\" \"}\n            {fiatSymbol.current}\n          </div>\n        </div>\n\n        <Twenty4hChangeInvestmentTotal\n          get24hourChangeTotal={get24hourChangeTotal}\n          fiatSymbol={fiatSymbol}\n        />\n      </td>\n\n      {/* profit */}\n      <td\n        className=\"clickable\"\n        onClick={\n          duration7Days(user) &&\n          (() => handleClick(\"balance\", \"all_currencies\"))\n        }\n      >\n        {(currentValueTotal - totalPurchase).toFixed(2)} {fiatSymbol.current}\n      </td>\n\n      {/* roi */}\n      <td\n        className=\"clickable\"\n        onClick={\n          duration7Days(user) && (() => handleClick(\"roi\", \"all_currencies\"))\n        }\n      >\n        <div className=\"x_container\">\n          <div>\n            {((currentValueTotal * 100) / totalPurchase - 100).toFixed(0)}%\n          </div>\n          <div className=\"x_value\">\n            ({(currentValueTotal / totalPurchase).toFixed(1)}\n            x)\n          </div>\n        </div>\n      </td>\n\n      {/* sparkline */}\n      <td>\n        <SparkLine user={user} cryptoCurrencies={cryptoCurrencies} />\n      </td>\n    </tr>\n  );\n};\n\nexport default OverviewTotal;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/SparkLine.js",["215"],"import React, { useState, useEffect } from \"react\";\nimport SparkLineCharts from \"./SparkLineCharts\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\n\nconst SparkLine = ({ user, cryptoCurrencies, currencyName }) => {\n  const [sparkLineData, setSparkLineData] = useState([]);\n\n  useEffect(() => {\n    getSparkLineData();\n  }, [cryptoCurrencies]);\n\n  const getSparkLineData = () => {\n    // not all 7d price arrays as returned by the api have the same length --> this results in the last values of the calculated total price array being too low\n    // this makes sure that all the indivual currency arrays from which totals are beeing calculated have the same length\n    // (which corresponds with the length of the shortest array)\n    // console.log(\"user\");\n    // console.log(user);\n    // console.log(\"cryptoCurrencies\");\n    // console.log(cryptoCurrencies);\n\n    if (\n      Object.keys(cryptoCurrencies).length > 0 &&\n      cryptoCurrencies.data.length > 0\n    ) {\n      let lengthArr = [];\n\n      // gets lenghts of 7d price array\n      cryptoCurrencies.data.forEach((obj, index) => {\n        lengthArr[index] = obj.sparkline_in_7d.price.length;\n      });\n\n      // get length of shortest 7d price array\n      const minLength = Math.min(...lengthArr);\n\n      // get length of longest 7d price array\n      const maxLength = Math.max(...lengthArr);\n\n      // sets array sparkLineCurrentValues to length of longest 7d price array\n      let sparkLineCurrentValues = new Array(maxLength).fill(0);\n\n      if (Object.keys(cryptoCurrencies).length > 0) {\n        cryptoCurrencies.data.forEach((obj) => {\n          // individual currency\n          if (currencyName) {\n            if (obj.id === currencyName) {\n              obj.sparkline_in_7d.price.forEach((price, index) => {\n                sparkLineCurrentValues[index] +=\n                  price * getAmount(user, obj.id);\n              });\n            }\n            // total\n          } else {\n            obj.sparkline_in_7d.price.forEach((price, index) => {\n              sparkLineCurrentValues[index] += price * getAmount(user, obj.id);\n            });\n          }\n        });\n\n        // sets result array of sparkline value to the length of the shortes 7d price array\n        sparkLineCurrentValues.length = minLength;\n\n        setSparkLineData(sparkLineCurrentValues);\n      }\n    }\n  };\n\n  const getX_axisArray = () => {\n    let Xaxis = [];\n    if (sparkLineData) {\n      Xaxis = new Array(sparkLineData.length).fill(\"\");\n    }\n    return Xaxis;\n  };\n\n  const checkLineColor = () => {\n    if (sparkLineData) {\n      return sparkLineData[sparkLineData.length - 1] - sparkLineData[0] > 0\n        ? \"green\"\n        : \"red\";\n    }\n  };\n\n  return (\n    <div style={{ width: \"10rem\" }}>\n      <SparkLineCharts\n        sparkLineData={sparkLineData}\n        getX_axisArray={getX_axisArray}\n        checkLineColor={checkLineColor}\n      />\n    </div>\n  );\n};\n\nexport default SparkLine;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryDateData.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/user.js",[],["216","217"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/ChangeMinMax.js",["218"],"import React, { useState, useEffect } from \"react\";\n\nconst ChangeMinMax = ({ dataArray, fiatSymbol }) => {\n  const [change, setChange] = useState(0);\n  const [twentyFourHoursMax, setTwentyFourHoursMax] = useState(0);\n  const [twentyFourHoursMin, setTwentyFourHoursMin] = useState(0);\n\n  useEffect(() => {\n    // array has NaN in the end which have to be removed because else change = NaN\n    const arr = dataArray.filter((el) => !isNaN(el));\n    setChange(dataArray[arr.length - 1] - arr[0]);\n    setTwentyFourHoursMax(get24hMax());\n    setTwentyFourHoursMin(get24hMin());\n  }, [dataArray]);\n\n  const get24hMax = () => {\n    const arraySorted = dataArray.sort(function (a, b) {\n      return b - a;\n    });\n\n    return arraySorted[0];\n  };\n\n  const get24hMin = () => {\n    const arrSorted = dataArray.sort(function (a, b) {\n      return a - b;\n    });\n\n    return arrSorted[0];\n  };\n\n  return (\n    <div id=\"change_min_max_charts_container\">\n      <div\n        style={{\n          color: change > 0 ? \"green\" : \"red\",\n        }}\n      >\n        change: {change.toFixed(2)} {fiatSymbol.current}\n      </div>\n      <div className=\"crypto_24h_change\">\n        max: {twentyFourHoursMax && twentyFourHoursMax.toFixed(2)}{\" \"}\n        {fiatSymbol.current}\n      </div>\n      <div className=\"crypto_24h_change\">\n        min: {twentyFourHoursMin && twentyFourHoursMin.toFixed(2)}{\" \"}\n        {fiatSymbol.current}\n      </div>\n    </div>\n  );\n};\n\nexport default ChangeMinMax;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/auth/Register.js",["219","220"],"import React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nconst Register = ({ logedin, register }) => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n  });\n\n  const { firstname, lastname, email, password, password2 } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    register(email, password, password2);\n  };\n\n  // if some nasty user enters .../login in url --> redirect to landing page\n  // otherwhise the register form could be displayed to a logged in user\n  if (logedin) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"form_container\">\n      <h3 className=\"large text-primary\">Sign Up</h3>\n      <p className=\"lead\">\n        <i className=\"fa fa-user auth_fa-user\"></i> Create your account\n      </p>\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"email\"\n            placeholder=\"Email Address\"\n            name=\"email\"\n            value={email}\n            onChange={(e) => onChange(e)}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            value={password}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            name=\"password2\"\n            value={password2}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n            required\n          />\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Register\" />\n      </form>\n      <p className=\"my-1\">\n        Already have an account? <Link to=\"/login\">Sign In</Link>\n      </p>\n    </div>\n  );\n};\n\nexport default Register;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/index.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxIframe.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/HeroImage.js",["221"],"import React from \"react\";\nimport crypto from \"../../img/crypto.svg\";\n\nconst HeroImage = () => {\n  return (\n    <img\n      src={crypto}\n      style={{\n        display: \"block\",\n        width: \"100vw\",\n        height: \"100vh\",\n      }}\n      alt=\"image\"\n    />\n  );\n};\n\nexport default HeroImage;\n",{"ruleId":"222","severity":1,"message":"223","line":88,"column":7,"nodeType":"224","messageId":"225","endLine":88,"endColumn":14},{"ruleId":"226","severity":1,"message":"227","line":92,"column":6,"nodeType":"228","endLine":92,"endColumn":8,"suggestions":"229"},{"ruleId":"226","severity":1,"message":"230","line":103,"column":6,"nodeType":"228","endLine":103,"endColumn":15,"suggestions":"231"},{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","replacedBy":"235"},{"ruleId":"226","severity":1,"message":"236","line":49,"column":6,"nodeType":"228","endLine":49,"endColumn":20,"suggestions":"237"},{"ruleId":"238","severity":1,"message":"239","line":213,"column":11,"nodeType":"240","endLine":213,"endColumn":28},{"ruleId":"222","severity":1,"message":"241","line":1,"column":17,"nodeType":"224","messageId":"225","endLine":1,"endColumn":25},{"ruleId":"232","replacedBy":"242"},{"ruleId":"234","replacedBy":"243"},{"ruleId":"232","replacedBy":"244"},{"ruleId":"234","replacedBy":"245"},{"ruleId":"222","severity":1,"message":"241","line":1,"column":17,"nodeType":"224","messageId":"225","endLine":1,"endColumn":25},{"ruleId":"226","severity":1,"message":"246","line":25,"column":6,"nodeType":"228","endLine":25,"endColumn":26,"suggestions":"247"},{"ruleId":"222","severity":1,"message":"248","line":38,"column":10,"nodeType":"224","messageId":"225","endLine":38,"endColumn":16},{"ruleId":"226","severity":1,"message":"249","line":46,"column":6,"nodeType":"228","endLine":46,"endColumn":8,"suggestions":"250"},{"ruleId":"226","severity":1,"message":"236","line":58,"column":6,"nodeType":"228","endLine":58,"endColumn":20,"suggestions":"251"},{"ruleId":"252","severity":1,"message":"253","line":105,"column":43,"nodeType":"254","messageId":"255","endLine":105,"endColumn":45},{"ruleId":"222","severity":1,"message":"256","line":106,"column":19,"nodeType":"224","messageId":"225","endLine":106,"endColumn":22},{"ruleId":"226","severity":1,"message":"257","line":162,"column":6,"nodeType":"228","endLine":162,"endColumn":47,"suggestions":"258"},{"ruleId":"259","severity":1,"message":"260","line":165,"column":5,"nodeType":"261","messageId":"262","endLine":174,"endColumn":6},{"ruleId":"232","replacedBy":"263"},{"ruleId":"234","replacedBy":"264"},{"ruleId":"232","replacedBy":"265"},{"ruleId":"234","replacedBy":"266"},{"ruleId":"232","replacedBy":"267"},{"ruleId":"234","replacedBy":"268"},{"ruleId":"232","replacedBy":"269"},{"ruleId":"234","replacedBy":"270"},{"ruleId":"226","severity":1,"message":"271","line":52,"column":6,"nodeType":"228","endLine":52,"endColumn":22,"suggestions":"272"},{"ruleId":"226","severity":1,"message":"273","line":56,"column":6,"nodeType":"228","endLine":56,"endColumn":20,"suggestions":"274"},{"ruleId":"226","severity":1,"message":"275","line":47,"column":6,"nodeType":"228","endLine":47,"endColumn":55,"suggestions":"276"},{"ruleId":"252","severity":1,"message":"253","line":57,"column":73,"nodeType":"254","messageId":"255","endLine":57,"endColumn":75},{"ruleId":"226","severity":1,"message":"277","line":62,"column":6,"nodeType":"228","endLine":62,"endColumn":25,"suggestions":"278"},{"ruleId":"226","severity":1,"message":"279","line":71,"column":6,"nodeType":"228","endLine":71,"endColumn":20,"suggestions":"280"},{"ruleId":"222","severity":1,"message":"281","line":112,"column":10,"nodeType":"224","messageId":"225","endLine":112,"endColumn":24},{"ruleId":"222","severity":1,"message":"241","line":1,"column":17,"nodeType":"224","messageId":"225","endLine":1,"endColumn":25},{"ruleId":"252","severity":1,"message":"253","line":75,"column":35,"nodeType":"254","messageId":"255","endLine":75,"endColumn":37},{"ruleId":"282","severity":1,"message":"283","line":111,"column":29,"nodeType":"284","messageId":"285","endLine":111,"endColumn":45},{"ruleId":"282","severity":1,"message":"286","line":118,"column":29,"nodeType":"284","messageId":"285","endLine":118,"endColumn":45},{"ruleId":"222","severity":1,"message":"287","line":175,"column":7,"nodeType":"224","messageId":"225","endLine":175,"endColumn":20},{"ruleId":"252","severity":1,"message":"253","line":195,"column":33,"nodeType":"254","messageId":"255","endLine":195,"endColumn":35},{"ruleId":"222","severity":1,"message":"288","line":1,"column":37,"nodeType":"224","messageId":"225","endLine":1,"endColumn":46},{"ruleId":"222","severity":1,"message":"289","line":5,"column":10,"nodeType":"224","messageId":"225","endLine":5,"endColumn":28},{"ruleId":"226","severity":1,"message":"290","line":38,"column":6,"nodeType":"228","endLine":38,"endColumn":25,"suggestions":"291"},{"ruleId":"226","severity":1,"message":"273","line":42,"column":6,"nodeType":"228","endLine":42,"endColumn":20,"suggestions":"292"},{"ruleId":"226","severity":1,"message":"293","line":10,"column":6,"nodeType":"228","endLine":10,"endColumn":24,"suggestions":"294"},{"ruleId":"232","replacedBy":"295"},{"ruleId":"234","replacedBy":"296"},{"ruleId":"226","severity":1,"message":"297","line":14,"column":6,"nodeType":"228","endLine":14,"endColumn":17,"suggestions":"298"},{"ruleId":"222","severity":1,"message":"299","line":11,"column":11,"nodeType":"224","messageId":"225","endLine":11,"endColumn":20},{"ruleId":"222","severity":1,"message":"300","line":11,"column":22,"nodeType":"224","messageId":"225","endLine":11,"endColumn":30},{"ruleId":"301","severity":1,"message":"302","line":6,"column":5,"nodeType":"303","endLine":14,"endColumn":7},"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadUserObj'. Either include it or remove the dependency array.","ArrayExpression",["304"],"React Hook useEffect has a missing dependency: 'updateExchangeRateState'. Either include it or remove the dependency array.",["305"],"no-native-reassign",["306"],"no-negated-in-lhs",["307"],"React Hook useEffect has missing dependencies: 'currency', 'fiat', and 'origin'. Either include them or remove the dependency array. Mutable values like 'fiat.current' aren't valid dependencies because mutating them doesn't re-render the component.",["308"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Fragment' is defined but never used.",["306"],["307"],["306"],["307"],"React Hook useEffect has missing dependencies: 'duration', 'logedin', and 'upDateMarketChartState'. Either include them or remove the dependency array. Mutable values like 'fiat.current' aren't valid dependencies because mutating them doesn't re-render the component.",["309"],"'origin' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'origin'. Either include it or remove the dependency array.",["310"],["311"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'key' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currency', 'fiat', 'positions', and 'updateResultArrayState'. Either include them or remove the dependency array. If 'updateResultArrayState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["312"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["306"],["307"],["306"],["307"],["306"],["307"],["306"],["307"],"React Hook useEffect has missing dependencies: 'fiat', 'prevCurrentValues', and 'prevFiat'. Either include them or remove the dependency array.",["313"],"React Hook useEffect has a missing dependency: 'calcChange'. Either include it or remove the dependency array. Mutable values like 'fiat.current' aren't valid dependencies because mutating them doesn't re-render the component.",["314"],"React Hook useEffect has a missing dependency: 'fiat'. Either include it or remove the dependency array. If 'setTotalPurchase' needs the current value of 'fiat', you can also switch to useReducer instead of useState and read 'fiat' in the reducer.",["315"],"React Hook useEffect has missing dependencies: 'cryptoCurrencies', 'overviewValues', and 'user'. Either include them or remove the dependency array.",["316"],"React Hook useEffect has a missing dependency: 'fiat'. Either include it or remove the dependency array. Mutable values like 'fiat.current' aren't valid dependencies because mutating them doesn't re-render the component.",["317"],"'scrollPosition' is assigned a value but never used.","no-self-assign","'sort[element][1]' is assigned to itself.","MemberExpression","selfAssignment","'sort[element][2]' is assigned to itself.","'checkDuration' is assigned a value but never used.","'useEffect' is defined but never used.","'getCurrenciesNames' is defined but never used.","React Hook useEffect has missing dependencies: 'fiat', 'prevCurrentValueTotal', and 'prevFiat'. Either include them or remove the dependency array.",["318"],["319"],"React Hook useEffect has a missing dependency: 'getSparkLineData'. Either include it or remove the dependency array.",["320"],["306"],["307"],"React Hook useEffect has missing dependencies: 'get24hMax' and 'get24hMin'. Either include them or remove the dependency array.",["321"],"'firstname' is assigned a value but never used.","'lastname' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},"no-global-assign","no-unsafe-negation",{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"326","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"337","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},"Update the dependencies array to be: [loadUserObj]",{"range":"352","text":"353"},"Update the dependencies array to be: [logedin, updateExchangeRateState]",{"range":"354","text":"355"},"Update the dependencies array to be: [currency, fiat, origin]",{"range":"356","text":"357"},"Update the dependencies array to be: [user, logedin, upDateMarketChartState, duration]",{"range":"358","text":"359"},"Update the dependencies array to be: [origin]",{"range":"360","text":"361"},{"range":"362","text":"357"},"Update the dependencies array to be: [nameArray, currentMarketChart, duration, currency, updateResultArrayState, positions, fiat]",{"range":"363","text":"364"},"Update the dependencies array to be: [fiat, overviewValues, prevCurrentValues, prevFiat]",{"range":"365","text":"366"},"Update the dependencies array to be: [calcChange]",{"range":"367","text":"368"},"Update the dependencies array to be: [user, cryptoCurrencies, logedin, renderOverview, fiat]",{"range":"369","text":"370"},"Update the dependencies array to be: [cryptoCurrencies, currentValueTotal, overviewValues, user]",{"range":"371","text":"372"},"Update the dependencies array to be: [fiat]",{"range":"373","text":"374"},"Update the dependencies array to be: [currentValueTotal, fiat, prevCurrentValueTotal, prevFiat]",{"range":"375","text":"376"},{"range":"377","text":"368"},"Update the dependencies array to be: [cryptoCurrencies, getSparkLineData]",{"range":"378","text":"379"},"Update the dependencies array to be: [dataArray, get24hMax, get24hMin]",{"range":"380","text":"381"},[2513,2515],"[loadUserObj]",[2712,2721],"[logedin, updateExchangeRateState]",[1747,1761],"[currency, fiat, origin]",[649,669],"[user, logedin, upDateMarketChartState, duration]",[1322,1324],"[origin]",[1607,1621],[5882,5923],"[nameArray, currentMarketChart, duration, currency, updateResultArrayState, positions, fiat]",[1792,1808],"[fiat, overviewValues, prevCurrentValues, prevFiat]",[1855,1869],"[calcChange]",[1386,1435],"[user, cryptoCurrencies, logedin, renderOverview, fiat]",[1938,1957],"[cryptoCurrencies, currentValueTotal, overviewValues, user]",[2212,2226],"[fiat]",[1308,1327],"[currentValueTotal, fiat, prevCurrentValueTotal, prevFiat]",[1374,1388],[341,359],"[cryptoCurrencies, getSparkLineData]",[578,589],"[dataArray, get24hMax, get24hMin]"]