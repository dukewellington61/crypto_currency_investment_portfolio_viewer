[{"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/App.js":"1","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryUserData.js":"2","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/Landing.js":"3","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/auth/Login.js":"4","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/positions/PositionsByCurrency.js":"5","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/auth.js":"6","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryFiatData.js":"7","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/CurrencyLogos.js":"8","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/TotalChart.js":"9","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/Menu.js":"10","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/TotalChartDiagramm.js":"11","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Twenty4hChangeInvestmentTotal.js":"12","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Twenty4hChangeInvestmentByCurrencies.js":"13","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/SparkLineCharts.js":"14","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/currencies.js":"15","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/Alert.js":"16","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/input/AddCrypto.js":"17","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/Fiat.js":"18","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/RemoveCryptoQuery.js":"19","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/OverviewCurrencies.js":"20","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Twenty4hChangeByCurrency.js":"21","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Overview.js":"22","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/positions.js":"23","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/Navbar.js":"24","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/AccountIcon.js":"25","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryCryptoData.js":"26","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/input/DeductCrypto.js":"27","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/utils/setAuthToken.js":"28","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/OverviewTotal.js":"29","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/SparkLine.js":"30","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryDateData.js":"31","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/user.js":"32","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/ChangeMinMax.js":"33","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/auth/Register.js":"34","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/index.js":"35","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxIframe.js":"36","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/HeroImage.js":"37","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliarySort.js":"38"},{"size":8456,"mtime":1612640474827,"results":"39","hashOfConfig":"40"},{"size":641,"mtime":1612202066511,"results":"41","hashOfConfig":"40"},{"size":7746,"mtime":1611959296562,"results":"42","hashOfConfig":"40"},{"size":1923,"mtime":1611972542674,"results":"43","hashOfConfig":"40"},{"size":4659,"mtime":1611883286240,"results":"44","hashOfConfig":"40"},{"size":957,"mtime":1609170003658,"results":"45","hashOfConfig":"40"},{"size":1319,"mtime":1610827508225,"results":"46","hashOfConfig":"40"},{"size":1115,"mtime":1611692214697,"results":"47","hashOfConfig":"40"},{"size":3358,"mtime":1611882739336,"results":"48","hashOfConfig":"40"},{"size":745,"mtime":1611700229225,"results":"49","hashOfConfig":"40"},{"size":7207,"mtime":1611589608395,"results":"50","hashOfConfig":"40"},{"size":508,"mtime":1610834986464,"results":"51","hashOfConfig":"40"},{"size":1785,"mtime":1610834901540,"results":"52","hashOfConfig":"40"},{"size":1070,"mtime":1610396805951,"results":"53","hashOfConfig":"40"},{"size":4866,"mtime":1611100607046,"results":"54","hashOfConfig":"40"},{"size":403,"mtime":1612456452627,"results":"55","hashOfConfig":"40"},{"size":5523,"mtime":1611703697770,"results":"56","hashOfConfig":"40"},{"size":349,"mtime":1611970344696,"results":"57","hashOfConfig":"40"},{"size":1613,"mtime":1611518629441,"results":"58","hashOfConfig":"40"},{"size":8850,"mtime":1612314635047,"results":"59","hashOfConfig":"40"},{"size":1565,"mtime":1611173535328,"results":"60","hashOfConfig":"40"},{"size":10698,"mtime":1612376615522,"results":"61","hashOfConfig":"40"},{"size":505,"mtime":1611417954959,"results":"62","hashOfConfig":"40"},{"size":4742,"mtime":1612041086909,"results":"63","hashOfConfig":"40"},{"size":348,"mtime":1611697412585,"results":"64","hashOfConfig":"40"},{"size":7440,"mtime":1612216861315,"results":"65","hashOfConfig":"40"},{"size":6369,"mtime":1611703712606,"results":"66","hashOfConfig":"40"},{"size":453,"mtime":1609170003662,"results":"67","hashOfConfig":"40"},{"size":4808,"mtime":1611706968838,"results":"68","hashOfConfig":"40"},{"size":2876,"mtime":1612314698899,"results":"69","hashOfConfig":"40"},{"size":1098,"mtime":1611843382134,"results":"70","hashOfConfig":"40"},{"size":433,"mtime":1609170003658,"results":"71","hashOfConfig":"40"},{"size":1466,"mtime":1611158442168,"results":"72","hashOfConfig":"40"},{"size":2232,"mtime":1610814403131,"results":"73","hashOfConfig":"40"},{"size":290,"mtime":1611970343672,"results":"74","hashOfConfig":"40"},{"size":1365,"mtime":1612126010814,"results":"75","hashOfConfig":"40"},{"size":295,"mtime":1612023103599,"results":"76","hashOfConfig":"40"},{"size":1214,"mtime":1612315258353,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1v98ubu",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"82"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"88"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"96"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"96"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"96"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"144"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"82"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"154"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"96"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/App.js",["178","179"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryUserData.js",[],["180","181"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/Landing.js",["182","183"],"import React, { Fragment, useState, useEffect, useCallback } from \"react\";\nimport { getMarketChartsCrypto2 } from \"../../actions/currencies\";\nimport { getCurrenciesNames } from \"../../auxiliary/auxiliaryCryptoData\";\nimport Overview from \"../overview/Overview\";\nimport TotalChart from \"../charts/TotalChart\";\n\nfunction Landing({\n  user,\n  cryptoCurrencies,\n  exchangeRates,\n  logedin,\n  fiat,\n  fiatSymbol,\n  triggerAlert,\n}) {\n  const [renderOverview, setRenderOverview] = useState(true);\n  const [renderTotalChart, setRenderTotalChart] = useState(false);\n\n  const toggleView = useCallback(() => {\n    if (renderOverview) {\n      setRenderOverview(false);\n      setRenderTotalChart(true);\n      return;\n    } else {\n      setRenderOverview(true);\n      setRenderTotalChart(false);\n    }\n  }, [renderOverview]);\n\n  const [origin, setOrigin] = useState(\"\");\n  const [currency, setCurrency] = useState(\"\");\n  const [originAndCurrency, setOriginAndCurency] = useState([]);\n\n  const updateOriginAndCurrencyState = useCallback((origin, currency) => {\n    setOrigin(origin);\n    setCurrency(currency);\n    setOriginAndCurency([origin, currency]);\n  }, []);\n\n  // on click duration (day, week, etc.) in @components/charts/TotalChart.js originAndCurrency is updated\n  // currency in originAndCurrency state gets _fiat.current appendix\n  // in order to update originAndCurrency state also on switch fiat the following useEffect hook is employed\n  // currency needs correct fiat.current appendix for cumulativeValueInvestment() @auxiliary/auxiliaryCryptoData.js to work properly\n  useEffect(() => {\n    if (currency !== \"all_currencies\") {\n      const curr = currency.split(\"_\")[0];\n      setOriginAndCurency([origin, curr + \"_\" + fiat.current]);\n    }\n  }, [fiat.current]);\n\n  const [marketChartTotal, setMarketChartTotal] = useState({});\n  const [marketChartDay, setMarketChartDay] = useState({});\n  const [marketChartWeek, setMarketChartWeek] = useState({});\n  const [marketChartMonth, setMarketChartMonth] = useState({});\n  const [currentMarketChart, setCurrentMarketChart] = useState({});\n\n  const [loaded, setLoaded] = useState(false);\n\n  const isEmpty = (obj) => Object.keys(obj).length === 0;\n\n  const objIncludesFiat = (obj) => {\n    let returnValue = \"\";\n    Object.keys(obj).forEach((el) => {\n      if (el.includes(fiat.current)) {\n        returnValue = true;\n        return;\n      }\n    });\n    // console.log(returnValue);\n    return returnValue;\n  };\n\n  const retrieveAttributesFromObject = (obj) => {\n    const returnObj = {};\n    for (const [key, value] of Object.entries(obj)) {\n      if (key.includes(fiat.current)) returnObj[key] = value;\n    }\n    return returnObj;\n  };\n\n  const upDateMarketChartState = (duration) => {\n    // console.log(\"upDateMarketChartState\");\n    switch (duration) {\n      case \"all\":\n        // console.log(marketChartTotal);\n        isEmpty(marketChartTotal) || !objIncludesFiat(marketChartTotal)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(\n              retrieveAttributesFromObject(marketChartTotal)\n            );\n        // console.log(marketChartTotal);\n        break;\n      case \"day\":\n        isEmpty(marketChartDay) || !objIncludesFiat(marketChartDay)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(retrieveAttributesFromObject(marketChartDay));\n        // console.log(marketChartDay);\n        break;\n      case \"week\":\n        isEmpty(marketChartWeek) || !objIncludesFiat(marketChartWeek)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(\n              retrieveAttributesFromObject(marketChartWeek)\n            );\n        break;\n      case \"month\":\n        isEmpty(marketChartMonth) || !objIncludesFiat(marketChartMonth)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(\n              retrieveAttributesFromObject(marketChartMonth)\n            );\n        break;\n      default:\n    }\n\n    function loadChartData(duration) {\n      setLoaded(false);\n      let currenciesObject = {};\n      const currencyNamesArr = getCurrenciesNames(user);\n\n      // api request is beeing conducted in accordance with the number of currencies\n      // if successful the retured data is beeing stored as arrays in currenciesObject (key = currencyName, value = array)\n      // if the number of attributes matches the number of currencies marketCharts and loaded state are updated\n      // if an error is returned by api the state loaded is set to true (so the empty diagram is beeing displayed) and an error message appears\n      currencyNamesArr.forEach(async (currencyName) => {\n        let currentPrice = 0;\n        cryptoCurrencies.data.forEach((obj) => {\n          if (obj.id === currencyName) currentPrice = obj.current_price;\n        });\n        const res = await getMarketChartsCrypto2(\n          user,\n          currencyName,\n          fiat,\n          currentPrice,\n          duration\n        );\n\n        if (res instanceof Error) {\n          setLoaded(true);\n          res.response\n            ? triggerAlert(res.response.data)\n            : triggerAlert(\"something went wrong\");\n\n          // this makes sure that currenciesObject only gets attributes if no error occurs so those attributes are proper arrays\n          // otherwhise attributes are non iterable error objects -> a arr.forEach() will throw an exception later in the code and break the app\n          // if api returns errors, currenciesObject remains incomplete and marketCharts state will not be updated\n          // so after the arr.forEach() is done marketCharts state either has valid data or is an empty object (which results in an empty diagram)\n        } else {\n          currenciesObject[currencyName + \"_\" + fiat.current] = res;\n          if (\n            Object.keys(currenciesObject).length === currencyNamesArr.length\n          ) {\n            switch (duration) {\n              case \"all\":\n                setMarketChartTotal(\n                  Object.assign(marketChartTotal, currenciesObject)\n                );\n                break;\n              case \"day\":\n                setMarketChartDay(\n                  Object.assign(marketChartDay, currenciesObject)\n                );\n                break;\n              case \"week\":\n                setMarketChartWeek(\n                  Object.assign(marketChartWeek, currenciesObject)\n                );\n\n                break;\n              case \"month\":\n                setMarketChartMonth(\n                  Object.assign(marketChartMonth, currenciesObject)\n                );\n                break;\n              default:\n            }\n\n            setCurrentMarketChart(currenciesObject);\n\n            setLoaded(true);\n          }\n        }\n      });\n    }\n  };\n\n  return (\n    <Fragment>\n      {renderOverview && (\n        <Overview\n          user={user}\n          cryptoCurrencies={cryptoCurrencies}\n          exchangeRates={exchangeRates}\n          logedin={logedin}\n          fiat={fiat}\n          fiatSymbol={fiatSymbol}\n          renderOverview={renderOverview}\n          updateOriginAndCurrencyState={updateOriginAndCurrencyState}\n          toggleView={toggleView}\n        />\n      )}\n      {renderTotalChart && (\n        <TotalChart\n          user={user}\n          cryptoCurrencies={cryptoCurrencies}\n          marketChartTotal={marketChartTotal}\n          currentMarketChart={currentMarketChart}\n          logedin={logedin}\n          triggerAlert={triggerAlert}\n          toggleView={toggleView}\n          originAndCurrency={originAndCurrency}\n          loaded={loaded}\n          logedin={logedin}\n          fiat={fiat}\n          fiatSymbol={fiatSymbol}\n          upDateMarketChartState={upDateMarketChartState}\n        />\n      )}\n    </Fragment>\n  );\n}\n\nexport default Landing;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/auth/Login.js",[],["184","185"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/positions/PositionsByCurrency.js",["186"],"import React, { Fragment } from \"react\";\nimport CurrencyLogos from \"../layout/CurrencyLogos\";\nimport { Link } from \"react-router-dom\";\n// import { removePosition } from \"../../actions/positions\";\nimport { getCurrencyPositions } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { useLocation } from \"react-router-dom\";\nimport { getAbbrevation } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getInitialValue } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getInitialValuePurchase } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getImage } from \"../../auxiliary/auxiliaryCryptoData\";\n\nfunction PositionsByCurrency({ cryptoCurrencies, fiat, fiatSymbol }) {\n  const data = useLocation();\n\n  const transformDate = (val) => {\n    const date = new Date(val);\n    const day =\n      date.getDate() < 10 ? \"0\" + date.getDate() : \"\" + date.getDate();\n    const month = date.toLocaleString(\"default\", { month: \"long\" });\n    const year = date.getFullYear();\n    const dateString = `${day}. ${month} ${year}`;\n    return dateString;\n  };\n\n  const sortPosition = (positionsArray) =>\n    positionsArray.sort(\n      (a, b) => Date.parse(b.date_of_purchase) - Date.parse(a.date_of_purchase)\n    );\n\n  const getSortedPositions = () => {\n    if (data.state.currency === \"all_currencies\") {\n      return sortPosition(data.state.user.positions);\n    } else {\n      return sortPosition(\n        getCurrencyPositions(data.state.user, data.state.currency)\n      );\n    }\n  };\n\n  // const deletePosition = (id) => {\n  //   removePosition(id);\n  // };\n\n  return (\n    <div id=\"positions_container\">\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <div style={{ display: \"flex\" }}>\n          <CurrencyLogos\n            cryptoCurrencies={cryptoCurrencies}\n            currency={data.state.currency}\n            origin={\"OverviewTotal\"}\n          />\n          <div style={{ marginLeft: \"1rem\" }}>transaction record</div>\n        </div>\n        <div id=\"toggle_view_ledger\">\n          <Link to=\"/\">\n            <button type=\"button\" class=\"btn btn-secondary\">\n              <i class=\"fas fa-angle-double-left\"></i> back to overview\n            </button>\n          </Link>\n        </div>\n      </div>\n\n      <table className=\"table table-striped\">\n        <tr>\n          <th></th>\n          <th>transaction date</th>\n          <th>amount</th>\n          <th>value</th>\n        </tr>\n        <tbody>\n          {getSortedPositions().map((position) => {\n            return (\n              <tr\n                className=\"clickable\"\n                style={{ color: position.amount < 0 ? \"red\" : \"green\" }}\n              >\n                <th></th>\n                <td>{transformDate(position.date_of_purchase)}</td>\n                <td>\n                  <img\n                    className=\"crypto_image\"\n                    src={getImage(cryptoCurrencies, position.crypto_currency)}\n                    alt={position.crypto_currency}\n                  />\n                  {position.amount}{\" \"}\n                  {getAbbrevation(cryptoCurrencies, position.crypto_currency)}\n                </td>\n                <td>\n                  {position[`price_${fiat.current}`].toFixed(2)}{\" \"}\n                  {fiatSymbol.current}\n                </td>\n                <td>\n                  {/* <div\n                    className=\"delete_ledger_entry\"\n                    // onClick={() => deletePosition(position._id)}\n                  >\n                    <i class=\"fas fa-trash-alt\"></i>\n                  </div> */}\n                </td>\n              </tr>\n            );\n          })}\n          <tr id=\"overview_total\">\n            <td>Total</td>\n            <th></th>\n            {data.state.currency === \"all_currencies\" ? (\n              <td></td>\n            ) : (\n              <td>\n                {getAmount(data.state.user, data.state.currency).toFixed(3)}{\" \"}\n                {getAbbrevation(cryptoCurrencies, data.state.currency)}\n              </td>\n            )}\n            {data.state.currency === \"all_currencies\" ? (\n              <td>\n                {getInitialValuePurchase(data.state.user, fiat).toFixed(2)}{\" \"}\n                {fiatSymbol.current}\n              </td>\n            ) : (\n              <td>\n                {getInitialValue(\n                  data.state.user,\n                  data.state.currency,\n                  fiat\n                ).toFixed(2)}{\" \"}\n                {fiatSymbol.current}\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default PositionsByCurrency;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/auth.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryFiatData.js",[],["187","188"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/CurrencyLogos.js",[],["189","190"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/TotalChart.js",["191","192","193"],"import React, { Fragment, useState, useEffect } from \"react\";\nimport TotalChartDiagramm from \"./TotalChartDiagramm\";\nimport ChangeMinMax from \"./ChangeMinMax\";\nimport CurrencyLogos from \"../layout/CurrencyLogos\";\n// import { checkDuration } from \"../../auxiliary/auxiliaryDateData\";\n\nconst TotalChart = ({\n  user,\n  cryptoCurrencies,\n  marketChartTotal,\n  currentMarketChart,\n  toggleView,\n  originAndCurrency,\n  loaded,\n  upDateMarketChartState,\n  logedin,\n  fiat,\n  fiatSymbol,\n}) => {\n  const [duration, setDuration] = useState(\"all\");\n\n  useEffect(() => {\n    if (logedin) upDateMarketChartState(duration);\n    // console.log(\"useEffect\");\n  }, [user, fiat.current]);\n\n  const handleClick = (e) => {\n    setDuration(e.target.innerHTML);\n    upDateMarketChartState(e.target.innerHTML);\n    // console.log(e.target.innerHTML);\n    // console.log(duration);\n  };\n\n  const [resultArray, setResultArray] = useState([]);\n\n  const updateResultArrayState = (arr) => setResultArray(arr);\n\n  const [origin, currency] = originAndCurrency;\n\n  // console.log(currency);\n\n  return !loaded ? (\n    <div>Loading ...</div>\n  ) : (\n    <div id=\"charts_container\">\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <div id=\"currency_logos\">\n          <CurrencyLogos\n            cryptoCurrencies={cryptoCurrencies}\n            currency={currency}\n          />\n        </div>\n        <div\n          id=\"toggle_view_charts\"\n          style={{ marginBottom: \"2rem\", marginRight: \"1rem\" }}\n          onClick={toggleView}\n        >\n          <button type=\"button\" class=\"btn btn-secondary\">\n            <i class=\"fas fa-angle-double-left\"></i> back to overview\n          </button>\n        </div>\n      </div>\n\n      <ChangeMinMax dataArray={resultArray} fiatSymbol={fiatSymbol} />\n      <div id=\"total_chart_container\">\n        <div id=\"durations_container\">\n          <div\n            id={duration === \"day\" && \"duration\"}\n            className=\"durations\"\n            onClick={(e) => handleClick(e)}\n          >\n            day\n          </div>\n          <div\n            id={duration === \"week\" && \"duration\"}\n            className=\"durations\"\n            onClick={(e) => handleClick(e)}\n            // style={{\n            //   display: checkDuration(marketChartTotal) >= 7 ? \"block\" : \"none\",\n            // }}\n          >\n            week\n          </div>\n          <div\n            id={duration === \"month\" && \"duration\"}\n            className=\"durations\"\n            onClick={(e) => handleClick(e)}\n            // style={{\n            //   display: checkDuration(marketChartTotal) >= 30 ? \"block\" : \"none\",\n            // }}\n          >\n            month\n          </div>\n          <div\n            id={duration === \"all\" && \"duration\"}\n            className=\"durations\"\n            onClick={(e) => handleClick(e)}\n          >\n            all\n          </div>\n        </div>\n        <div>\n          <TotalChartDiagramm\n            currentMarketChart={currentMarketChart}\n            positions={user.positions}\n            fiat={fiat}\n            originAndCurrency={originAndCurrency}\n            duration={duration}\n            updateResultArrayState={updateResultArrayState}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TotalChart;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/Menu.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/TotalChartDiagramm.js",["194","195","196","197","198","199"],"import React, { Fragment, useState, useEffect } from \"react\";\n// import ChangeMinMax from \"./ChangeMinMax\";\nimport { Line } from \"react-chartjs-2\";\nimport { cumulativeValueInvestment } from \"../../auxiliary/auxiliaryCryptoData\";\n\nconst TotalChartDiagramm = ({\n  positions,\n  currentMarketChart,\n  fiat,\n  originAndCurrency,\n  duration,\n  updateResultArrayState,\n}) => {\n  // console.log(currentMarketChart);\n  const [nameArray, setNameArray] = useState(\"\");\n\n  const [labelStr, setLabelStr] = useState(\"\");\n\n  const [resultArray, setResultArray] = useState([]);\n\n  const [timeStampArray, setTimeStampArray] = useState([]);\n\n  const [origin, currency] = originAndCurrency;\n\n  useEffect(() => {\n    console.log(\"useEffect\");\n    switch (origin) {\n      case \"initial_value\":\n        setNameArray(\"initialValueArray\");\n        // setLabelStr(`Value of ${currency} in ${fiat.current}`);\n        break;\n      case \"current_value\":\n        setNameArray(\"currentValueArray\");\n        // setLabelStr(`Value of ${currency} in ${fiat.current}`);\n        break;\n      case \"balance\":\n        setNameArray(\"balanceArray\");\n        // setLabelStr(`Value of ${currency} in ${fiat.current}`);\n        break;\n      case \"roi\":\n        setNameArray(\"roiArray\");\n        // setLabelStr(`ROI in %`);\n        break;\n      default:\n    }\n  }, []);\n\n  useEffect(() => {\n    origin === \"roi\"\n      ? setLabelStr(`ROI in %`)\n      : setLabelStr(\n          `Value of ${\n            currency === \"all_currencies\"\n              ? \"this portfolio\"\n              : currency.split(\"_\")[0]\n          } in ${fiat.current}`\n        );\n  }, [fiat.current]);\n\n  useEffect(() => {\n    const currenciesTotalObjectsArray = [];\n\n    const timeStamps = [];\n\n    let currencyArr = [];\n\n    currency === \"all_currencies\"\n      ? (currencyArr = Object.keys(currentMarketChart))\n      : currencyArr.push(currency);\n\n    // the following 2 functions push objects with initialValueArray, currentValueArray, balanceArray, roiArray and timeStampArray for every currency\n    // in currenciesTotalObjectsArray\n    const totalValueInvestment = (obj) => {\n      currenciesTotalObjectsArray.push(obj);\n    };\n\n    currencyArr.forEach((currency) => {\n      // console.log(currency);\n      totalValueInvestment(\n        cumulativeValueInvestment(\n          positions,\n          currentMarketChart[currency],\n          currency,\n          fiat\n        )\n      );\n    });\n\n    // console.log(currency);\n\n    // not all currency price arrays as returned by the api have the same length --> this results in the last values of the calculated total price array being too low\n    // this makes sure that all the indivual currency arrays from which totals are beeing calculated have the same length\n    // (which corresponds with the length of the shortest array)\n    let lengthArr = [];\n\n    // puts length of each array in object in array\n    currenciesTotalObjectsArray.forEach(\n      (obj, index) => (lengthArr[index] = obj.initialValueArray.length)\n    );\n\n    // gets the shortest array length\n    const minLength = Math.min(...lengthArr);\n\n    // sets length of arrays in object to the shortest length\n    currenciesTotalObjectsArray.map((obj) => {\n      for (const [key, value] of Object.entries(obj)) {\n        value.length = minLength;\n      }\n    });\n\n    // retrieves timeStamps from array of objects with initialValueArray, currentValueArray, balanceArray, roiArray and timeStampArray for every currency\n    // those objects are beeing created in cumulativeValueInvestment() @auxiliaryCryptoData.js\n    // some of these arrays contain empty slots (for details see comments in cumulativeValueInvestment() in @auxiliaryCryptoData.js)\n    // those have to be removed, else the line diagrams display a lot of null values at the beginning\n    // hence filter is employed\n    currency !== \"all_currencies\"\n      ? currenciesTotalObjectsArray.forEach((obj) => {\n          const filtered = obj.timeStampArray.filter((el) => el !== undefined);\n          filtered.forEach((el, index) => (timeStamps[index] = el));\n        })\n      : // if total is to be displayed the above causes problems so in that case no filter is employed\n        currenciesTotalObjectsArray.forEach((obj) => {\n          obj.timeStampArray.forEach((el, index) => (timeStamps[index] = el));\n        });\n\n    // the following code sums up initial_value, current_value, balance of every individual currency so that the totals of these attributes can be displayed in a chart\n    // it also calculates the development of roi over time\n    const resArray = new Array(timeStamps.length).fill(0);\n\n    if (nameArray) {\n      const initValResArray = new Array(timeStamps.length).fill(0);\n      const currValResArray = new Array(timeStamps.length).fill(0);\n\n      currenciesTotalObjectsArray.forEach((obj) => {\n        if (nameArray === \"roiArray\") {\n          obj.initialValueArray.forEach((el, index) => {\n            initValResArray[index] += el;\n          });\n          obj.currentValueArray.forEach(\n            (el, index) => (currValResArray[index] += el)\n          );\n          obj.roiArray.forEach(\n            (el, index) =>\n              (resArray[index] =\n                (currValResArray[index] * 100) / initValResArray[index] - 100)\n          );\n        } else {\n          if (currency === \"all_currencies\") {\n            obj[nameArray].forEach((el, index) => (resArray[index] += el));\n          } else {\n            // this removes undefined elements from arrays (why are there undefined elements in some arrays? see explanation above for empty slots in timeStampArray)\n            const filtered = obj[nameArray].filter((el) => el !== undefined);\n            filtered.forEach((el, index) => (resArray[index] += el));\n          }\n        }\n      });\n    }\n    setResultArray(resArray);\n    setTimeStampArray(timeStamps);\n\n    updateResultArrayState(resArray);\n  }, [nameArray, currentMarketChart, duration]);\n\n  const getUnit = () => {\n    switch (duration) {\n      case \"day\":\n        return \"hour\";\n      case \"week\":\n        return \"day\";\n      case \"month\":\n        return \"week\";\n      case \"all\":\n        return \"month\";\n    }\n  };\n\n  return (\n    <Fragment>\n      <div>\n        <Line\n          data={{\n            labels: timeStampArray,\n            datasets: [\n              {\n                label: labelStr,\n                data: resultArray,\n              },\n            ],\n          }}\n          // width={500}\n          height={500}\n          options={{\n            maintainAspectRatio: false,\n            scales: {\n              yAxes: [\n                {\n                  scaleLabel: {\n                    display: true,\n                    labelString: labelStr,\n                  },\n                },\n              ],\n              xAxes: [\n                {\n                  type: \"time\",\n                  time: {\n                    unit: getUnit(),\n                    displayFormats: {\n                      quarter: \"MMM YYYY\",\n                    },\n                    distribution: \"series\",\n                  },\n                },\n              ],\n            },\n          }}\n        />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default TotalChartDiagramm;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Twenty4hChangeInvestmentTotal.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Twenty4hChangeInvestmentByCurrencies.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/SparkLineCharts.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/currencies.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/Alert.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/input/AddCrypto.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/Fiat.js",[],["200","201"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/RemoveCryptoQuery.js",[],["202","203"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/OverviewCurrencies.js",["204","205"],"import React, { useState, useEffect } from \"react\";\nimport Twenty4hChangeInvestmentByCurrencies from \"./Twenty4hChangeInvestmentByCurrencies\";\nimport Twenty4hChangeByCurrency from \"./Twenty4hChangeByCurrency\";\nimport SparkLine from \"../charts/SparkLine\";\nimport { Link } from \"react-router-dom\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getCurrentPrice } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getImage } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getAbbrevation } from \"../../auxiliary/auxiliaryCryptoData\";\n\nconst OverviewCurrencies = ({\n  user,\n  cryptoCurrencies,\n  exchangeRates,\n  overviewValues,\n  prevCurrentValues,\n  logedin,\n  fiat,\n  prevFiat,\n  fiatSymbol,\n  getInitialValue,\n  get24hourChangeByCurrency,\n  getCurrentValue,\n  handleClick,\n}) => {\n  // both hooks are neccessary to persist change currentValues so they survive re mounting of this component\n  // console.log(overviewValues);\n  const [currentValuesChange, setCurrentValuesChange] = useState(\n    sessionStorage.getItem(\"changeObj\")\n  );\n\n  useEffect(() => {\n    if (fiat.current === prevFiat.current) {\n      const changeObj = {};\n      overviewValues.forEach(\n        ([currencyName, amount, initialValue, currentValue, profit, ROI]) => {\n          const change = currentValue - prevCurrentValues.current[currencyName];\n\n          if (change !== 0) changeObj[currencyName] = change;\n        }\n      );\n\n      // makes sure that session storage and state are only updated if it is not a re mount\n      if (\n        !sessionStorage.getItem(\"changeObj\") ||\n        !isNaN(Object.values(changeObj)[0])\n      ) {\n        sessionStorage.setItem(\"changeObj\", JSON.stringify(changeObj));\n        setCurrentValuesChange(JSON.stringify(changeObj));\n      }\n    }\n  }, [overviewValues]);\n\n  useEffect(() => {\n    calcChange();\n  }, [fiat.current]);\n\n  // converts change current total into the selected fiat\n  const calcChange = async () => {\n    // switch from EUR to USD\n    if (fiat.current === \"USD\" && prevFiat.current === \"EUR\") {\n      if (exchangeRates.data) {\n        // console.log(\"EUR to USD\");\n        const changeObj = {};\n        overviewValues.forEach(\n          ([currencyName, amount, initialValue, currentValue, profit, ROI]) => {\n            if (currentValuesChange) {\n              changeObj[currencyName] =\n                JSON.parse(currentValuesChange)[currencyName] *\n                exchangeRates.data.rates.USD;\n            }\n          }\n        );\n\n        setCurrentValuesChange(JSON.stringify(changeObj));\n      }\n    }\n\n    // switch from USD to EUR\n    if (fiat.current === \"EUR\" && prevFiat.current === \"USD\") {\n      if (exchangeRates.data) {\n        // console.log(\"USD to EUR\");\n        const changeObj = {};\n        overviewValues.forEach(\n          ([currencyName, amount, initialValue, currentValue, profit, ROI]) => {\n            changeObj[currencyName] =\n              JSON.parse(currentValuesChange)[currencyName] *\n              (1 / exchangeRates.data.rates.USD);\n          }\n        );\n\n        setCurrentValuesChange(JSON.stringify(changeObj));\n      }\n    }\n  };\n  // const [valuesArray, setValuesArray] = useState([]);\n\n  // useEffect(() => {\n  //   setValuesArray(overviewValues);\n  // }, [overviewValues]);\n\n  return (\n    <tbody>\n      {logedin &&\n        overviewValues.map(\n          ([currencyName, amount, initialValue, currentValue, profit, ROI]) => {\n            return (\n              <tr>\n                {/* crypto */}\n                <Link\n                  to={{\n                    pathname: \"/position\",\n                    current_price: getCurrentPrice(\n                      cryptoCurrencies,\n                      currencyName\n                    ),\n                    state: {\n                      currency: currencyName,\n                      user: user,\n                    },\n                  }}\n                >\n                  <th scope=\"row\">\n                    <div className=\"overview_name_container\">\n                      {Object.keys(cryptoCurrencies).length === 0 ? (\n                        <i\n                          className=\"fa fa-spinner fa-spin\"\n                          style={{ fontSize: \"1.5rem\" }}\n                        />\n                      ) : (\n                        <img\n                          className=\"crypto_image\"\n                          src={getImage(cryptoCurrencies, currencyName)}\n                          alt={currencyName}\n                        />\n                      )}\n                      <div className=\"crypto_name\">\n                        {currencyName.charAt(0).toUpperCase() +\n                          currencyName.slice(1)}{\" \"}\n                      </div>\n                      <div className=\"crypto_abbreviation\">\n                        ({getAbbrevation(cryptoCurrencies, currencyName)})\n                      </div>\n                    </div>\n                    <Twenty4hChangeByCurrency\n                      cryptoCurrencies={cryptoCurrencies}\n                      currencyName={currencyName}\n                      fiatSymbol={fiatSymbol}\n                    />\n                  </th>\n                </Link>\n\n                {/* amount */}\n                <td>{amount.toFixed(2)}</td>\n                {/* initial value */}\n                <td\n                  className=\"clickable\"\n                  onClick={() => handleClick(\"initial_value\", currencyName)}\n                >\n                  {\n                    // getAmount(user, currencyName) *\n                    initialValue.toFixed(2)\n                  }{\" \"}\n                  {fiatSymbol.current}\n                </td>\n                {/* current value */}\n                <td\n                  className=\"clickable\"\n                  onClick={() => handleClick(\"current_value\", currencyName)}\n                >\n                  <div className=\"change_container\">\n                    {currentValue.toFixed(2)} {fiatSymbol.current}\n                    {currentValuesChange && (\n                      <div\n                        className=\"change_value\"\n                        style={{\n                          color:\n                            currentValuesChange !== undefined &&\n                            JSON.parse(currentValuesChange)[currencyName] >= 0\n                              ? \"green\"\n                              : \"red\",\n                        }}\n                      >\n                        {Object.keys(JSON.parse(currentValuesChange)).length >\n                          0 &&\n                        JSON.parse(currentValuesChange)[currencyName] &&\n                        JSON.parse(currentValuesChange)[currencyName] !==\n                          null &&\n                        JSON.parse(currentValuesChange)[currencyName] !== 0\n                          ? JSON.parse(currentValuesChange)[\n                              currencyName\n                            ].toFixed(2)\n                          : Number(0).toFixed(2)}{\" \"}\n                        {fiatSymbol.current}\n                      </div>\n                    )}\n                  </div>\n\n                  <Twenty4hChangeInvestmentByCurrencies\n                    user={user}\n                    cryptoCurrencies={cryptoCurrencies}\n                    getAmount={getAmount}\n                    get24hourChangeByCurrency={get24hourChangeByCurrency}\n                    getCurrentValue={getCurrentValue}\n                    currencyName={currencyName}\n                    fiatSymbol={fiatSymbol}\n                  />\n                </td>\n                {/* profit */}\n                <td\n                  className=\"clickable\"\n                  onClick={() => handleClick(\"balance\", currencyName)}\n                >\n                  {profit.toFixed(2)} {fiatSymbol.current}\n                </td>\n                {/* roi */}\n                <td\n                  className=\"clickable\"\n                  onClick={() => handleClick(\"roi\", currencyName)}\n                >\n                  <div className=\"x_container\">\n                    <div>{ROI.toFixed(0)}%</div>\n                    <div className=\"x_value\">\n                      (\n                      {(\n                        currentValue / getInitialValue(user, currencyName, fiat)\n                      ).toFixed(1)}\n                      x)\n                    </div>\n                  </div>\n                </td>\n                {/* sparkline */}\n                <td>\n                  <SparkLine\n                    user={user}\n                    cryptoCurrencies={cryptoCurrencies}\n                    currencyName={currencyName}\n                    overviewValues={overviewValues}\n                  />\n                </td>\n              </tr>\n            );\n          }\n        )}\n    </tbody>\n  );\n};\n\nexport default OverviewCurrencies;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Twenty4hChangeByCurrency.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/Overview.js",["206","207","208","209","210"],"import React, { useState, useEffect, useRef, Fragment } from \"react\";\nimport OverviewCurrencies from \"./OverviewCurrencies\";\nimport OverviewTotal from \"./OverviewTotal\";\nimport { getOverviewValues } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getCurrentValue } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getInitialValue } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getInitialValuePurchase } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { sortOverViewValuesArray } from \"../../auxiliary/auxiliarySort\";\nimport { handleUI } from \"../../auxiliary/auxiliarySort\";\n\nconst Overview = ({\n  user,\n  cryptoCurrencies,\n  exchangeRates,\n  logedin,\n  renderOverview,\n  fiat,\n  fiatSymbol,\n  updateOriginAndCurrencyState,\n  toggleView,\n}) => {\n  const [overviewValues, setOverviewValues] = useState([]);\n\n  const [currentValueTotal, setCurrentValueTotal] = useState(0);\n\n  const [totalPurchase, setTotalPurchase] = useState(0);\n\n  useEffect(() => {\n    if (logedin) {\n      const overviewValuesArray = getOverviewValues(\n        user,\n        cryptoCurrencies,\n        fiat\n      );\n\n      if (overviewValuesArray) {\n        setOverviewValues(overviewValuesArray);\n\n        const totalsArray = overviewValuesArray.map(\n          ([currencyName, currencyValue]) =>\n            getCurrentValue(user, cryptoCurrencies, currencyName)\n        );\n\n        setCurrentValueTotal(totalsArray.reduce((a, b) => a + b, 0));\n\n        setTotalPurchase(getInitialValuePurchase(user, fiat));\n      }\n    }\n  }, [user, cryptoCurrencies, logedin, renderOverview]);\n\n  // these next lines of code preserve the previous currentValue over re-render\n  const prevCurrentValueTotal = useRef(0);\n\n  const prevCurrentValues = useRef({});\n\n  useEffect(() => {\n    prevCurrentValueTotal.current = currentValueTotal;\n    overviewValues.map(\n      ([currencyName, amount, initialValue, currentValue, profit, ROI]) => {\n        const currVal = getCurrentValue(user, cryptoCurrencies, currencyName);\n        prevCurrentValues.current[currencyName] = currVal;\n      }\n    );\n  }, [currentValueTotal]);\n\n  // these next lines of code preserve the previous state of fiat (i.e. the fiat user had selected before current\n  const [fiatCurr, setFiatCurr] = useState(\"\");\n\n  const prevFiat = useRef({});\n\n  useEffect(() => {\n    setFiatCurr(fiat.current);\n  }, [fiat.current]);\n\n  useEffect(() => {\n    prevFiat.current = fiatCurr;\n  }, [fiatCurr]);\n\n  const get24hourChangeByCurrency = (currencyName) => {\n    let returnValue = 0;\n\n    if (cryptoCurrencies.data) {\n      cryptoCurrencies.data.forEach((el) => {\n        if (el.id === currencyName) {\n          returnValue = el.price_change_percentage_24h;\n        }\n      });\n    }\n    return returnValue;\n  };\n\n  const get24hourChangeTotal = () => {\n    let sum = 0;\n    overviewValues.forEach((arr) => {\n      sum +=\n        (get24hourChangeByCurrency(arr[0]) *\n          getCurrentValue(user, cryptoCurrencies, arr[0])) /\n        100;\n    });\n\n    return sum;\n  };\n\n  const handleClick = (origin, currency) => {\n    toggleView();\n    currency === \"all_currencies\"\n      ? updateOriginAndCurrencyState(origin, currency)\n      : updateOriginAndCurrencyState(origin, `${currency}_${fiat.current}`);\n  };\n\n  // arrows for horizontal scroll in iframe\n  // update state neccessary, because without re render --> conditionally arrow display / not display doesn't work properly\n  // state variable is needed nowhere\n  const [scrollPosition, setScrollposition] = useState(0);\n\n  const arrowRightRef = useRef(null);\n  const arrowLeftRef = useRef(null);\n  const containerRef = useRef(null);\n  const arrowContainerRef = useRef(null);\n\n  const handleLeftClick = () => {\n    const scrollPos = (containerRef.current.scrollLeft -= 280);\n    setScrollposition(scrollPos);\n    sessionStorage.setItem(\"scroll_position\", scrollPos);\n  };\n\n  const handleRightClick = () => {\n    const scrollPos = (containerRef.current.scrollLeft -= -280);\n    setScrollposition(scrollPos);\n    sessionStorage.setItem(\"scroll_position\", scrollPos);\n  };\n\n  useEffect(() => {\n    if (containerRef)\n      containerRef.current.scrollLeft = sessionStorage.getItem(\n        \"scroll_position\"\n      );\n\n    arrowRightRef.current.classList.add(\"arrow_display\");\n    arrowLeftRef.current.classList.remove(\"arrow_display\");\n  }, []);\n\n  if (containerRef.current) {\n    containerRef.current.addEventListener(\"scroll\", () => {\n      if (containerRef.current.scrollLeft === 0) {\n        arrowRightRef.current.classList.add(\"arrow_display\");\n        arrowLeftRef.current.classList.remove(\"arrow_display\");\n      }\n\n      if (containerRef.current.scrollLeft > 0) {\n        arrowLeftRef.current.classList.add(\"arrow_display\");\n      }\n\n      if (\n        containerRef.current.scrollLeft ===\n        containerRef.current.scrollWidth - window.innerWidth\n      ) {\n        arrowRightRef.current.classList.remove(\"arrow_display\");\n      }\n\n      if (\n        containerRef.current.scrollLeft <\n        containerRef.current.scrollWidth - window.innerWidth\n      ) {\n        arrowRightRef.current.classList.add(\"arrow_display\");\n      }\n    });\n  }\n\n  // hideArrowContainerOnMobile(arrowContainerRef);\n\n  // hides arrows in iframe on mobile devices //\n  useEffect(() => {\n    if (\n      navigator.userAgent.match(/Android/i) ||\n      navigator.userAgent.match(/webOS/i) ||\n      navigator.userAgent.match(/iPhone/i) ||\n      navigator.userAgent.match(/iPad/i) ||\n      navigator.userAgent.match(/iPod/i) ||\n      navigator.userAgent.match(/BlackBerry/i) ||\n      navigator.userAgent.match(/Windows Phone/i)\n    ) {\n      arrowContainerRef.current.classList.add(\"hide_arrow_container\");\n    }\n  });\n\n  const handleSort = (index, desc, e) => {\n    setOverviewValues(sortOverViewValuesArray(overviewValues, index, desc));\n    handleUI(e);\n  };\n\n  return cryptoCurrencies.data && cryptoCurrencies.data.length === 0 ? (\n    <div className=\"provisional_user_info\">\n      <div>\n        There are currently no cryptocurrencies in your portfolio. Add crypto by\n        hitting the \"+ add crypto\" button in the navbar menu.\n      </div>\n    </div>\n  ) : (\n    <Fragment>\n      <div id=\"arrow_container\" ref={arrowContainerRef}>\n        <i\n          className=\"fas fa-chevron-left\"\n          ref={arrowLeftRef}\n          onClick={handleLeftClick}\n        ></i>\n        <i\n          className=\"fas fa-chevron-right\"\n          ref={arrowRightRef}\n          onClick={handleRightClick}\n        ></i>\n      </div>\n      <div id=\"overview_container\">\n        <table\n          id=\"overview_table\"\n          className=\"table table-striped table-responsive-sm\"\n          ref={containerRef}\n        >\n          <thead className=\"thead-dark\">\n            <tr>\n              <th scope=\"col\">\n                <div className=\"name_and_arrows\">\n                  Crypto{\" \"}\n                  <i\n                    className=\"fas fa-sort-up\"\n                    onClick={(e) => handleSort(0, false, e)}\n                  ></i>\n                  <i\n                    className=\"fas fa-sort-down\"\n                    onClick={(e) => handleSort(0, true, e)}\n                  ></i>\n                </div>\n              </th>\n              <th scope=\"col\">\n                <div className=\"name_and_arrows\">\n                  Amount\n                  <i\n                    className=\"fas fa-sort-up\"\n                    onClick={(e) => handleSort(1, false, e)}\n                  ></i>\n                  <i\n                    className=\"fas fa-sort-down\"\n                    onClick={(e) => handleSort(1, true, e)}\n                  ></i>\n                </div>\n              </th>\n              <th scope=\"col\">\n                <div className=\"name_and_arrows\">\n                  Initial Value\n                  <i\n                    className=\"fas fa-sort-up\"\n                    onClick={(e) => handleSort(2, false, e)}\n                  ></i>\n                  <i\n                    className=\"fas fa-sort-down\"\n                    onClick={(e) => handleSort(2, true, e)}\n                  ></i>\n                </div>\n              </th>\n              <th scope=\"col\">\n                <div className=\"name_and_arrows\">\n                  Current Value\n                  <i\n                    className=\"fas fa-sort-up\"\n                    onClick={(e) => handleSort(3, false, e)}\n                  ></i>\n                  <i\n                    className=\"fas fa-sort-down\"\n                    onClick={(e) => handleSort(3, true, e)}\n                  ></i>\n                </div>\n              </th>\n              <th scope=\"col\">\n                <div className=\"name_and_arrows\">\n                  Profit\n                  <i\n                    className=\"fas fa-sort-up\"\n                    onClick={(e) => handleSort(4, false, e)}\n                  ></i>\n                  <i\n                    className=\"fas fa-sort-down\"\n                    onClick={(e) => handleSort(4, true, e)}\n                  ></i>\n                </div>\n              </th>\n              <th scope=\"col\">\n                <div className=\"name_and_arrows\">\n                  ROI\n                  <i\n                    className=\"fas fa-sort-up\"\n                    onClick={(e) => handleSort(5, false, e)}\n                  ></i>\n                  <i\n                    className=\"fas fa-sort-down\"\n                    onClick={(e) => handleSort(5, true, e)}\n                  ></i>\n                </div>\n              </th>\n              <th scope=\"col\">Last 7 Days</th>\n            </tr>\n          </thead>\n          <OverviewCurrencies\n            user={user}\n            cryptoCurrencies={cryptoCurrencies}\n            exchangeRates={exchangeRates}\n            overviewValues={overviewValues}\n            prevCurrentValues={prevCurrentValues}\n            logedin={logedin}\n            fiat={fiat}\n            prevFiat={prevFiat}\n            fiatSymbol={fiatSymbol}\n            getInitialValue={getInitialValue}\n            get24hourChangeByCurrency={get24hourChangeByCurrency}\n            getCurrentValue={getCurrentValue}\n            handleClick={handleClick}\n          />\n          <OverviewTotal\n            user={user}\n            cryptoCurrencies={cryptoCurrencies}\n            exchangeRates={exchangeRates}\n            totalPurchase={totalPurchase}\n            currentValueTotal={currentValueTotal}\n            prevCurrentValueTotal={prevCurrentValueTotal}\n            fiat={fiat}\n            prevFiat={prevFiat}\n            fiatSymbol={fiatSymbol}\n            get24hourChangeTotal={get24hourChangeTotal}\n            handleClick={handleClick}\n          />\n        </table>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default React.memo(Overview);\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/positions.js",[],["211","212"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/Navbar.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/navbar/AccountIcon.js",["213"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryCryptoData.js",["214","215","216","217","218"],"export const getCurrenciesNames = (user) => {\n  let currencyArr = [];\n  if (user && user.positions) {\n    user.positions.map((position) =>\n      currencyArr.push(position.crypto_currency)\n    );\n  }\n\n  // techsith's recommended way to remove duplicates from array (https://www.youtube.com/watch?v=dvPybpgk5Y4)\n  return [...new Set(currencyArr)];\n};\n\n// creates an array which has [currencyName, amount, initial_value, current_value, profit and roi]\nexport const getOverviewValues = (user, cryptoCurrencies, fiat) => {\n  let returnObj = {};\n  let resultArray = [];\n\n  getCurrenciesNames(user).forEach((currencyName, index, arr) => {\n    resultArray[index] = [];\n    resultArray[index][0] = currencyName;\n    resultArray[index][1] = getAmount(user, currencyName);\n    resultArray[index][2] = getInitialValue(user, currencyName, fiat);\n    resultArray[index][3] = getCurrentValue(\n      user,\n      cryptoCurrencies,\n      currencyName\n    );\n    resultArray[index][4] =\n      getCurrentValue(user, cryptoCurrencies, currencyName) -\n      getInitialValue(user, currencyName, fiat);\n    resultArray[index][5] =\n      (getCurrentValue(user, cryptoCurrencies, currencyName) * 100) /\n        getInitialValue(user, currencyName, fiat) -\n      100;\n\n    let resultArraySorted = resultArray.sort(function (a, b) {\n      return b[3] - a[3];\n    });\n\n    returnObj.arr = resultArraySorted;\n  });\n\n  return returnObj.arr;\n};\n\nexport const getCurrentValue = (user, cryptoCurrencies, currencyName) => {\n  const currentPrice = getCurrentPrice(cryptoCurrencies, currencyName);\n  const amount = getAmount(user, currencyName);\n  const currentValue = currentPrice * amount;\n\n  return currentValue;\n};\n\nexport const getCurrentPrice = (cryptoCurrencies, currencyName) => {\n  if (cryptoCurrencies.data && typeof currencyName === \"string\") {\n    const currentPrice = cryptoCurrencies.data.find(\n      (el) => el.id === currencyName\n    );\n\n    if (currentPrice) return currentPrice.current_price;\n  }\n};\n\nexport const getCurrencyPositions = (user, currencyName) => {\n  if (user.positions) {\n    return user.positions.filter(\n      (position) => position.crypto_currency === currencyName\n    );\n  }\n};\n\nexport const getAmount = (user, currencyName) => {\n  let sum = 0;\n  if (user.positions) {\n    user.positions.map((position) => {\n      if (position.crypto_currency === currencyName) {\n        sum += parseFloat(position.amount);\n      }\n    });\n  }\n\n  return sum;\n};\n\nconst getAmountAndDate = (positions, currencyName, fiat) => {\n  // extracts amount of coins, date of purchase and price\n  let AmountAndDateArr = [];\n\n  positions.forEach((el) => {\n    let arrEl = [];\n\n    // currencyName has a \"_fiat\" attached to it which has to be removed so the conditional can work\n    if (el.crypto_currency === currencyName.split(\"_\")[0]) {\n      // console.log(currencyName);\n      arrEl[0] = Date.parse(el.date_of_purchase);\n      arrEl[1] = parseFloat(el.amount);\n      arrEl[2] = el[`price_${fiat.current}`];\n      AmountAndDateArr.push(arrEl);\n    }\n  });\n\n  // sorts AmountAndDateArr by purchase date beginning with the oldest\n  let sort = AmountAndDateArr.sort(function (a, b) {\n    return a[0] - b[0];\n  });\n\n  // adds amount of coins in array so that each amount is the sum of itself + the previous amount\n  for (const element in sort) {\n    element > 0\n      ? (sort[element][1] = sort[element][1] + sort[element - 1][1])\n      : (sort[element][1] = sort[element][1]);\n  }\n\n  // adds price of individual purchases so that each price in array is the sum of itself + the previous amount\n  for (const element in sort) {\n    element > 0\n      ? (sort[element][2] = sort[element][2] + sort[element - 1][2])\n      : (sort[element][2] = sort[element][2]);\n  }\n  return sort;\n};\n\n// returns object (one for each currency) which has various arrays (initialValueArray, currentValueArray etc..)\n// those arrays that are beeing used to display the whole duration from first purchase until present time have all the same length even if a currency had been purchased later\n// if that is the case, an equivalent amount of positions at the beginning of those arrays are undefined\nexport const cumulativeValueInvestment = (\n  positions,\n  marketChart,\n  currency,\n  fiat\n) => {\n  let resultObject = {};\n  let initialValueArr = [];\n  let currentValueArr = [];\n  let balanceArr = [];\n  let roiArr = [];\n  let timeStampArr = [];\n\n  // 1st array: getAmountAndDate() returns array with amount, price and date of purchase for each position of a crypro currency\n  // 2nd array: marketChart is array of objects -> each object has initialValueArray, currentValueArray, balanceArray etc. ..\n  if (marketChart) {\n    // console.log(marketChart);\n    getAmountAndDate(positions, currency, fiat).forEach(\n      ([date_of_purchase, amount, initial_value]) => {\n        marketChart.forEach(([date, price_crypto, timeStamp], index) => {\n          if (date_of_purchase <= date) {\n            currentValueArr[index] = price_crypto * amount;\n            timeStampArr[index] = getTimeStamps(marketChart, index, [\n              date,\n              price_crypto,\n              timeStamp,\n            ]);\n            // timeStampArr[index] = marketChart[index][0];\n            initialValueArr[index] = initial_value;\n            balanceArr[index] = currentValueArr[index] - initialValueArr[index];\n            roiArr[index] =\n              (currentValueArr[index] * 100) / initialValueArr[index] - 100;\n          }\n        });\n      }\n    );\n  }\n\n  resultObject.initialValueArray = initialValueArr;\n  resultObject.currentValueArray = currentValueArr;\n  resultObject.balanceArray = balanceArr;\n  resultObject.roiArray = roiArr;\n  resultObject.timeStampArray = timeStampArr;\n\n  return resultObject;\n};\n\n// returns duration in days -> from date of first purchase currency until now\n// duration is beeing used in conditional to make sure that x-axis doesn't have too many timestamps (granularity of data returned by API)\nconst checkDuration = (marketChart) =>\n  (marketChart[marketChart.length - 1][0] - marketChart[0][0]) /\n  1000 /\n  (24 * 60 * 60);\n\nconst getTimeStamps = (marketChart, index, array2) => {\n  // if (\n  //   index === 0 || checkDuration(marketChart) < 90\n  //     ? index % 10 === 0\n  //     : index % 5 === 0\n  // ) {\n  //   return array2[2];\n  // } else {\n  //   return \" \";\n  // }\n  return array2[2];\n};\n\nexport const getInitialValue = (user, currency, fiat) => {\n  let sum = 0;\n  user.positions.map((position) => {\n    if (position.crypto_currency === currency) {\n      sum += position[`price_${fiat.current}`];\n    }\n  });\n  return sum;\n};\n\nexport const getImage = (cryptoCurrencies, currencyName) => {\n  let url = \"\";\n  if (Object.keys(cryptoCurrencies).length > 0)\n    cryptoCurrencies.data.forEach((obj) => {\n      if (obj.id === currencyName) url = obj.image;\n    });\n  return url;\n};\n\nexport const getAbbrevation = (cryptoCurrencies, currencyName) => {\n  let abb = \"\";\n  if (Object.keys(cryptoCurrencies).length > 0) {\n    cryptoCurrencies.data.forEach((obj) => {\n      if (obj.id === currencyName) {\n        abb = obj.symbol;\n      }\n    });\n\n    return abb;\n  }\n};\n\nexport const getInitialValuePurchase = (user, fiat) => {\n  // console.log(fiat);\n  let sum = 0;\n  if (user && user.positions)\n    user.positions.forEach((position) => {\n      // sum += position[`price_${fiat.current}`] * position.amount;\n      sum += position[`price_${fiat.current}`];\n    });\n  return sum;\n};\n",["219","220"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/input/DeductCrypto.js",["221","222"],"import React, { Fragment, useState, useEffect } from \"react\";\nimport RemoveCryptoQuery from \"../layout/RemoveCryptoQuery\";\nimport { Link } from \"react-router-dom\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getCurrenciesNames } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getInitialValue } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { convertFiat } from \"../../auxiliary/auxiliaryFiatData\";\n\nconst DeductCrypto = ({\n  user,\n  currencyNames,\n  makePosition,\n  loadUserObj,\n  setUser,\n  triggerAlert,\n  setCurrencyNames,\n}) => {\n  let [formData, setFormData] = useState({\n    crypto_currency: \"\",\n    amount: \"\",\n    date_of_purchase: \"\",\n  });\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const { crypto_currency, amount, date_of_purchase } = formData;\n\n  const [renderSafetyQuery, setRenderSafetyQuery] = useState(false);\n\n  const removeSavetyQuery = () => setRenderSafetyQuery(false);\n\n  // const [currencyNames, setCurrencyNames] = useState([]);\n\n  // useEffect(() => {\n  //   const namesArr = getCurrenciesNames(user);\n  //   namesArr.unshift(\"\");\n  //   setCurrencyNames(namesArr);\n  // }, []);\n\n  const [currency, setCurrency] = useState(\"\");\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n\n    // user input validation\n    if (!crypto_currency) {\n      triggerAlert(\"Please select a cryptocurrency\", \"danger\");\n      return;\n    }\n\n    const currentAmount = getAmount(user, crypto_currency);\n\n    if (amount > currentAmount) {\n      triggerAlert(\n        `You currently have only ${currentAmount} unit(s) of this currency`,\n        \"danger\"\n      );\n      return;\n    }\n\n    // sets selected currency to useState so it can be used in child component (onSubmit sets it back to blank)\n    setCurrency(crypto_currency);\n\n    // renders overlay with safety query if user reduces amount of a currency to 0 (which will remove that currency from portfolio)\n    // in that case rest of code in onSubmit function doesn't execute\n    if (parseFloat(amount) === currentAmount) {\n      setRenderSafetyQuery(true);\n      return;\n    }\n\n    // value of the amount (in fiat) to be deducted from the amount of a crypto currency in the portfolio is calculated based on the median value\n    // of all positions of this currency\n    const median_price_currency_positions =\n      getInitialValue(user, crypto_currency, { current: \"EUR\" }) /\n      getAmount(user, crypto_currency);\n\n    // calculates the actual value of the deductable amount\n    const deductable_value = median_price_currency_positions * amount;\n\n    // returns an object which has actual value of deductable amount in EUR, USD and GBP\n    const convertObject = await convertFiat(\n      deductable_value,\n      \"EUR\",\n      date_of_purchase,\n      triggerAlert\n    );\n\n    // actual value of deductable amount is turned into negative\n    for (let [key, value] of Object.entries(convertObject)) {\n      convertObject[key] = value * -1;\n    }\n    // sets content of convertObject which is the negtive value of deductable amount for attributes EUR, USD and GBP to the formData Object\n    formData = Object.assign(formData, convertObject);\n\n    // amount is beeing turned into negative so the corresponding position has a negative amount property\n    formData.amount = parseFloat(formData.amount) * -1;\n\n    await makePosition(formData);\n\n    // sets form fields back to blank\n    makeBlankForm();\n\n    // reloads user object which is now updated with the deductable position\n    loadUserObj();\n  };\n\n  const makeBlankForm = () =>\n    setFormData({\n      crypto_currency: \"\",\n      amount: \"\",\n      date_of_purchase: \"\",\n    });\n\n  return (\n    <Fragment>\n      <div style={{ display: renderSafetyQuery ? \"block\" : \"none\" }}>\n        <RemoveCryptoQuery\n          user={user}\n          currency={currency}\n          currencyNames={currencyNames}\n          setUser={setUser}\n          removeSavetyQuery={removeSavetyQuery}\n          triggerAlert={triggerAlert}\n          makeBlankForm={makeBlankForm}\n          setCurrencyNames={setCurrencyNames}\n        />\n      </div>\n      <div id=\"toggle_view_ledger\">\n        <Link to=\"/\">\n          <button type=\"button\" class=\"btn btn-secondary\">\n            <i class=\"fas fa-angle-double-left\"></i> back to overview\n          </button>\n        </Link>\n      </div>\n      <div className=\"form_container\">\n        <h3 className=\"large text-primary\">Deduct Crypto</h3>\n        <p className=\"lead\">Deduct cryptocurrency from your portfolio</p>\n        <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n          <div className=\"form-group\">\n            <div className=\"dropdown input_field\">\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                }}\n              >\n                <div>Select a cryptocurrency</div>\n                <select\n                  className=\"btn btn-outline-secondary\"\n                  name=\"crypto_currency\"\n                  style={{ position: \"absolute\", right: \"0\", width: \"50%\" }}\n                  onChange={(e) => onChange(e)}\n                >\n                  <option value={\"\"}>{\"\"}</option>\n                  {currencyNames.map((currencyName) => {\n                    return (\n                      <option value={`${currencyName}`}>{currencyName}</option>\n                    );\n                  })}\n                </select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <input\n              className=\"form-control input_field\"\n              type=\"number\"\n              placeholder=\"Amount\"\n              name=\"amount\"\n              value={amount}\n              onChange={(e) => onChange(e)}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <input\n              className=\"form-control input_field\"\n              type=\"date\"\n              name=\"date_of_purchase\"\n              value={date_of_purchase}\n              onChange={(e) => onChange(e)}\n              required\n              max={new Date().toISOString().split(\"T\")[0]}\n            />\n          </div>\n\n          <input type=\"submit\" className=\"btn btn-primary\" value=\"Deduct\" />\n        </form>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default DeductCrypto;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/utils/setAuthToken.js",[],["223","224"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/overview/OverviewTotal.js",["225","226"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport SparkLine from \"../charts/SparkLine\";\nimport Twenty4hChangeInvestmentTotal from \"./Twenty4hChangeInvestmentTotal\";\nimport CurrencyLogos from \"../layout/CurrencyLogos\";\nimport { duration7Days } from \"../../auxiliary/auxiliaryDateData\";\n\nconst OverviewTotal = ({\n  user,\n  cryptoCurrencies,\n  exchangeRates,\n  totalPurchase,\n  currentValueTotal,\n  prevCurrentValueTotal,\n  fiat,\n  prevFiat,\n  fiatSymbol,\n  get24hourChangeTotal,\n  handleClick,\n}) => {\n  // both hooks are neccessary to persist change currentValueTotal so it survives re mounting of this component\n  const [currentValueTotalChange, setCurrentValueTotalChange] = useState(\n    sessionStorage.getItem(\"change\")\n  );\n\n  useEffect(() => {\n    // makes sure that change current total is not re - calculated when user switches fiat\n    if (fiat.current === prevFiat.current) {\n      const change = (\n        currentValueTotal - prevCurrentValueTotal.current\n      ).toFixed(2);\n      // makes sure that session storage and state are only updated if it is not a re mount\n      if (!isNaN(change) && prevCurrentValueTotal.current !== 0) {\n        sessionStorage.setItem(\"change\", change);\n        setCurrentValueTotalChange(change);\n      }\n    }\n  }, [currentValueTotal]);\n\n  useEffect(() => {\n    calcChange();\n  }, [fiat.current]);\n\n  // converts change current total into the selected fiat\n  const calcChange = async () => {\n    // switch from EUR to USD\n    if (fiat.current === \"USD\" && prevFiat.current === \"EUR\") {\n      if (exchangeRates.data) {\n        setCurrentValueTotalChange(\n          (currentValueTotalChange * exchangeRates.data.rates.USD).toFixed(2)\n        );\n      }\n    }\n\n    // switch from USD to EUR\n    if (fiat.current === \"EUR\" && prevFiat.current === \"USD\") {\n      if (exchangeRates.data) {\n        setCurrentValueTotalChange(\n          (\n            currentValueTotalChange *\n            (1 / exchangeRates.data.rates.USD)\n          ).toFixed(2)\n        );\n      }\n    }\n  };\n\n  return (\n    <tr id=\"overview_total\">\n      {/* currencys and logos*/}\n      <Link\n        to={{\n          pathname: \"/position\",\n          // current_price: totalPurchase.toFixed(2),\n          state: {\n            currency: \"all_currencies\",\n            user: user,\n          },\n        }}\n      >\n        {/* <th scope=\"row\"></th> */}\n        <td>\n          {\" \"}\n          <div style={{ display: \"flex\", justifyContent: \"start\" }}>\n            <CurrencyLogos\n              cryptoCurrencies={cryptoCurrencies}\n              currency={\"all_currencies\"}\n              origin={\"OverviewTotal\"}\n            />\n          </div>\n        </td>\n      </Link>\n\n      <td>Total Portfolio</td>\n\n      {/* initial value */}\n      <td\n        className=\"clickable\"\n        onClick={\n          duration7Days(user) &&\n          (() => handleClick(\"initial_value\", \"all_currencies\"))\n        }\n      >\n        {totalPurchase.toFixed(2)} {fiatSymbol.current}\n      </td>\n\n      {/* current value */}\n      <td\n        className=\"clickable\"\n        onClick={\n          duration7Days(user) &&\n          (() => handleClick(\"current_value\", \"all_currencies\"))\n        }\n      >\n        <div className=\"change_container\">\n          <div>\n            {currentValueTotal.toFixed(2)} {fiatSymbol.current}\n          </div>\n          <div\n            className=\"change_value\"\n            style={{\n              color: currentValueTotalChange >= 0 ? \"green\" : \"red\",\n            }}\n          >\n            {currentValueTotalChange && currentValueTotalChange !== 0\n              ? currentValueTotalChange\n              : 0}{\" \"}\n            {fiatSymbol.current}\n          </div>\n        </div>\n\n        <Twenty4hChangeInvestmentTotal\n          get24hourChangeTotal={get24hourChangeTotal}\n          fiatSymbol={fiatSymbol}\n        />\n      </td>\n\n      {/* profit */}\n      <td\n        className=\"clickable\"\n        onClick={\n          duration7Days(user) &&\n          (() => handleClick(\"balance\", \"all_currencies\"))\n        }\n      >\n        {(currentValueTotal - totalPurchase).toFixed(2)} {fiatSymbol.current}\n      </td>\n\n      {/* roi */}\n      <td\n        className=\"clickable\"\n        onClick={\n          duration7Days(user) && (() => handleClick(\"roi\", \"all_currencies\"))\n        }\n      >\n        <div className=\"x_container\">\n          <div>\n            {((currentValueTotal * 100) / totalPurchase - 100).toFixed(0)}%\n          </div>\n          <div className=\"x_value\">\n            ({(currentValueTotal / totalPurchase).toFixed(1)}\n            x)\n          </div>\n        </div>\n      </td>\n\n      {/* sparkline */}\n      <td>\n        <SparkLine user={user} cryptoCurrencies={cryptoCurrencies} />\n      </td>\n    </tr>\n  );\n};\n\nexport default OverviewTotal;\n",["227","228"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/SparkLine.js",["229"],"import React, { useState, useEffect } from \"react\";\nimport SparkLineCharts from \"./SparkLineCharts\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\n\nconst SparkLine = ({\n  user,\n  cryptoCurrencies,\n  currencyName,\n  overviewValues,\n}) => {\n  const [sparkLineData, setSparkLineData] = useState([]);\n\n  useEffect(() => {\n    getSparkLineData();\n  }, [cryptoCurrencies, overviewValues]);\n\n  const getSparkLineData = () => {\n    // not all 7d price arrays as returned by the api have the same length --> this results in the last values of the calculated total price array being too low\n    // the following code makes sure that all the indivual currency arrays from which totals are beeing calculated have the same length\n    // (which corresponds with the length of the shortest array)\n\n    if (\n      Object.keys(cryptoCurrencies).length > 0 &&\n      cryptoCurrencies.data.length > 0\n    ) {\n      let lengthArr = [];\n\n      // gets lenghts of 7d price array\n      cryptoCurrencies.data.forEach((obj, index) => {\n        lengthArr[index] = obj.sparkline_in_7d.price.length;\n      });\n\n      // get length of shortest 7d price array\n      const minLength = Math.min(...lengthArr);\n\n      // get length of longest 7d price array\n      const maxLength = Math.max(...lengthArr);\n\n      // sets array sparkLineCurrentValues to length of longest 7d price array\n      let sparkLineCurrentValues = new Array(maxLength).fill(0);\n\n      if (Object.keys(cryptoCurrencies).length > 0) {\n        cryptoCurrencies.data.forEach((obj) => {\n          // individual currency\n          if (currencyName) {\n            if (obj.id === currencyName) {\n              obj.sparkline_in_7d.price.forEach((price, index) => {\n                sparkLineCurrentValues[index] +=\n                  price * getAmount(user, obj.id);\n              });\n            }\n            // total\n          } else {\n            obj.sparkline_in_7d.price.forEach((price, index) => {\n              sparkLineCurrentValues[index] += price * getAmount(user, obj.id);\n            });\n          }\n        });\n\n        // sets result array of sparkline value to the length of the shortes 7d price array\n        sparkLineCurrentValues.length = minLength;\n\n        setSparkLineData(sparkLineCurrentValues);\n      }\n    }\n  };\n\n  const getX_axisArray = () => {\n    let Xaxis = [];\n    if (sparkLineData) {\n      Xaxis = new Array(sparkLineData.length).fill(\"\");\n    }\n    return Xaxis;\n  };\n\n  const checkLineColor = () => {\n    if (sparkLineData) {\n      return sparkLineData[sparkLineData.length - 1] - sparkLineData[0] > 0\n        ? \"green\"\n        : \"red\";\n    }\n  };\n\n  return (\n    <div style={{ width: \"10rem\" }}>\n      <SparkLineCharts\n        sparkLineData={sparkLineData}\n        getX_axisArray={getX_axisArray}\n        checkLineColor={checkLineColor}\n      />\n    </div>\n  );\n};\n\nexport default SparkLine;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliaryDateData.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/actions/user.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/charts/ChangeMinMax.js",["230"],"import React, { useState, useEffect } from \"react\";\n\nconst ChangeMinMax = ({ dataArray, fiatSymbol }) => {\n  const [change, setChange] = useState(0);\n  const [twentyFourHoursMax, setTwentyFourHoursMax] = useState(0);\n  const [twentyFourHoursMin, setTwentyFourHoursMin] = useState(0);\n\n  useEffect(() => {\n    // array has NaN in the end which have to be removed because else change = NaN\n    const arr = dataArray.filter((el) => !isNaN(el));\n    setChange(dataArray[arr.length - 1] - arr[0]);\n    setTwentyFourHoursMax(get24hMax());\n    setTwentyFourHoursMin(get24hMin());\n  }, [dataArray]);\n\n  const get24hMax = () => {\n    const arraySorted = dataArray.sort(function (a, b) {\n      return b - a;\n    });\n\n    return arraySorted[0];\n  };\n\n  const get24hMin = () => {\n    const arrSorted = dataArray.sort(function (a, b) {\n      return a - b;\n    });\n\n    return arrSorted[0];\n  };\n\n  return (\n    <div id=\"change_min_max_charts_container\">\n      <div\n        style={{\n          color: change > 0 ? \"green\" : \"red\",\n        }}\n      >\n        change: {change.toFixed(2)} {fiatSymbol.current}\n      </div>\n      <div className=\"crypto_24h_change\">\n        max: {twentyFourHoursMax && twentyFourHoursMax.toFixed(2)}{\" \"}\n        {fiatSymbol.current}\n      </div>\n      <div className=\"crypto_24h_change\">\n        min: {twentyFourHoursMin && twentyFourHoursMin.toFixed(2)}{\" \"}\n        {fiatSymbol.current}\n      </div>\n    </div>\n  );\n};\n\nexport default ChangeMinMax;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/auth/Register.js",["231","232"],"import React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nconst Register = ({ logedin, register }) => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n  });\n\n  const { firstname, lastname, email, password, password2 } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    register(email, password, password2);\n  };\n\n  // if some nasty user enters .../login in url --> redirect to landing page\n  // otherwhise the register form could be displayed to a logged in user\n  if (logedin) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"form_container\">\n      <h3 className=\"large text-primary\">Sign Up</h3>\n      <p className=\"lead\">\n        <i className=\"fa fa-user auth_fa-user\"></i> Create your account\n      </p>\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"email\"\n            placeholder=\"Email Address\"\n            name=\"email\"\n            value={email}\n            onChange={(e) => onChange(e)}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            value={password}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            name=\"password2\"\n            value={password2}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n            required\n          />\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Register\" />\n      </form>\n      <p className=\"my-1\">\n        Already have an account? <Link to=\"/login\">Sign In</Link>\n      </p>\n    </div>\n  );\n};\n\nexport default Register;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/index.js",[],["233","234"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxIframe.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/components/layout/HeroImage.js",["235"],"import React from \"react\";\nimport crypto from \"../../img/crypto.svg\";\n\nconst HeroImage = () => {\n  return (\n    <img\n      src={crypto}\n      style={{\n        display: \"block\",\n        width: \"100vw\",\n        height: \"100vh\",\n      }}\n      alt=\"image\"\n    />\n  );\n};\n\nexport default HeroImage;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/client/src/auxiliary/auxiliarySort.js",[],{"ruleId":"236","severity":1,"message":"237","line":88,"column":7,"nodeType":"238","messageId":"239","endLine":88,"endColumn":14},{"ruleId":"240","severity":1,"message":"241","line":92,"column":6,"nodeType":"242","endLine":92,"endColumn":8,"suggestions":"243"},{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","replacedBy":"247"},{"ruleId":"240","severity":1,"message":"248","line":49,"column":6,"nodeType":"242","endLine":49,"endColumn":20,"suggestions":"249"},{"ruleId":"250","severity":1,"message":"251","line":213,"column":11,"nodeType":"252","endLine":213,"endColumn":28},{"ruleId":"244","replacedBy":"253"},{"ruleId":"246","replacedBy":"254"},{"ruleId":"236","severity":1,"message":"255","line":1,"column":17,"nodeType":"238","messageId":"239","endLine":1,"endColumn":25},{"ruleId":"244","replacedBy":"256"},{"ruleId":"246","replacedBy":"257"},{"ruleId":"244","replacedBy":"258"},{"ruleId":"246","replacedBy":"259"},{"ruleId":"236","severity":1,"message":"255","line":1,"column":17,"nodeType":"238","messageId":"239","endLine":1,"endColumn":25},{"ruleId":"240","severity":1,"message":"260","line":25,"column":6,"nodeType":"242","endLine":25,"endColumn":26,"suggestions":"261"},{"ruleId":"236","severity":1,"message":"262","line":38,"column":10,"nodeType":"238","messageId":"239","endLine":38,"endColumn":16},{"ruleId":"240","severity":1,"message":"263","line":46,"column":6,"nodeType":"242","endLine":46,"endColumn":8,"suggestions":"264"},{"ruleId":"240","severity":1,"message":"248","line":58,"column":6,"nodeType":"242","endLine":58,"endColumn":20,"suggestions":"265"},{"ruleId":"266","severity":1,"message":"267","line":105,"column":43,"nodeType":"268","messageId":"269","endLine":105,"endColumn":45},{"ruleId":"236","severity":1,"message":"270","line":106,"column":19,"nodeType":"238","messageId":"239","endLine":106,"endColumn":22},{"ruleId":"240","severity":1,"message":"271","line":162,"column":6,"nodeType":"242","endLine":162,"endColumn":47,"suggestions":"272"},{"ruleId":"273","severity":1,"message":"274","line":165,"column":5,"nodeType":"275","messageId":"276","endLine":174,"endColumn":6},{"ruleId":"244","replacedBy":"277"},{"ruleId":"246","replacedBy":"278"},{"ruleId":"244","replacedBy":"279"},{"ruleId":"246","replacedBy":"280"},{"ruleId":"240","severity":1,"message":"281","line":52,"column":6,"nodeType":"242","endLine":52,"endColumn":22,"suggestions":"282"},{"ruleId":"240","severity":1,"message":"283","line":56,"column":6,"nodeType":"242","endLine":56,"endColumn":20,"suggestions":"284"},{"ruleId":"240","severity":1,"message":"285","line":49,"column":6,"nodeType":"242","endLine":49,"endColumn":55,"suggestions":"286"},{"ruleId":"266","severity":1,"message":"267","line":59,"column":73,"nodeType":"268","messageId":"269","endLine":59,"endColumn":75},{"ruleId":"240","severity":1,"message":"287","line":64,"column":6,"nodeType":"242","endLine":64,"endColumn":25,"suggestions":"288"},{"ruleId":"240","severity":1,"message":"289","line":73,"column":6,"nodeType":"242","endLine":73,"endColumn":20,"suggestions":"290"},{"ruleId":"236","severity":1,"message":"291","line":114,"column":10,"nodeType":"238","messageId":"239","endLine":114,"endColumn":24},{"ruleId":"244","replacedBy":"292"},{"ruleId":"246","replacedBy":"293"},{"ruleId":"236","severity":1,"message":"255","line":1,"column":17,"nodeType":"238","messageId":"239","endLine":1,"endColumn":25},{"ruleId":"266","severity":1,"message":"267","line":75,"column":35,"nodeType":"268","messageId":"269","endLine":75,"endColumn":37},{"ruleId":"294","severity":1,"message":"295","line":111,"column":29,"nodeType":"296","messageId":"297","endLine":111,"endColumn":45},{"ruleId":"294","severity":1,"message":"298","line":118,"column":29,"nodeType":"296","messageId":"297","endLine":118,"endColumn":45},{"ruleId":"236","severity":1,"message":"299","line":175,"column":7,"nodeType":"238","messageId":"239","endLine":175,"endColumn":20},{"ruleId":"266","severity":1,"message":"267","line":195,"column":33,"nodeType":"268","messageId":"269","endLine":195,"endColumn":35},{"ruleId":"244","replacedBy":"300"},{"ruleId":"246","replacedBy":"301"},{"ruleId":"236","severity":1,"message":"302","line":1,"column":37,"nodeType":"238","messageId":"239","endLine":1,"endColumn":46},{"ruleId":"236","severity":1,"message":"303","line":5,"column":10,"nodeType":"238","messageId":"239","endLine":5,"endColumn":28},{"ruleId":"244","replacedBy":"304"},{"ruleId":"246","replacedBy":"305"},{"ruleId":"240","severity":1,"message":"306","line":38,"column":6,"nodeType":"242","endLine":38,"endColumn":25,"suggestions":"307"},{"ruleId":"240","severity":1,"message":"283","line":42,"column":6,"nodeType":"242","endLine":42,"endColumn":20,"suggestions":"308"},{"ruleId":"244","replacedBy":"309"},{"ruleId":"246","replacedBy":"310"},{"ruleId":"240","severity":1,"message":"311","line":15,"column":6,"nodeType":"242","endLine":15,"endColumn":40,"suggestions":"312"},{"ruleId":"240","severity":1,"message":"313","line":14,"column":6,"nodeType":"242","endLine":14,"endColumn":17,"suggestions":"314"},{"ruleId":"236","severity":1,"message":"315","line":11,"column":11,"nodeType":"238","messageId":"239","endLine":11,"endColumn":20},{"ruleId":"236","severity":1,"message":"316","line":11,"column":22,"nodeType":"238","messageId":"239","endLine":11,"endColumn":30},{"ruleId":"244","replacedBy":"317"},{"ruleId":"246","replacedBy":"318"},{"ruleId":"319","severity":1,"message":"320","line":6,"column":5,"nodeType":"321","endLine":14,"endColumn":7},"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadUserObj'. Either include it or remove the dependency array.","ArrayExpression",["322"],"no-native-reassign",["323"],"no-negated-in-lhs",["324"],"React Hook useEffect has missing dependencies: 'currency', 'fiat', and 'origin'. Either include them or remove the dependency array. Mutable values like 'fiat.current' aren't valid dependencies because mutating them doesn't re-render the component.",["325"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["323"],["324"],"'Fragment' is defined but never used.",["323"],["324"],["323"],["324"],"React Hook useEffect has missing dependencies: 'duration', 'logedin', and 'upDateMarketChartState'. Either include them or remove the dependency array. Mutable values like 'fiat.current' aren't valid dependencies because mutating them doesn't re-render the component.",["326"],"'origin' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'origin'. Either include it or remove the dependency array.",["327"],["328"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'key' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currency', 'fiat', 'positions', and 'updateResultArrayState'. Either include them or remove the dependency array. If 'updateResultArrayState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["329"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["323"],["324"],["323"],["324"],"React Hook useEffect has missing dependencies: 'fiat', 'prevCurrentValues', and 'prevFiat'. Either include them or remove the dependency array.",["330"],"React Hook useEffect has a missing dependency: 'calcChange'. Either include it or remove the dependency array. Mutable values like 'fiat.current' aren't valid dependencies because mutating them doesn't re-render the component.",["331"],"React Hook useEffect has a missing dependency: 'fiat'. Either include it or remove the dependency array. If 'setTotalPurchase' needs the current value of 'fiat', you can also switch to useReducer instead of useState and read 'fiat' in the reducer.",["332"],"React Hook useEffect has missing dependencies: 'cryptoCurrencies', 'overviewValues', and 'user'. Either include them or remove the dependency array.",["333"],"React Hook useEffect has a missing dependency: 'fiat'. Either include it or remove the dependency array. Mutable values like 'fiat.current' aren't valid dependencies because mutating them doesn't re-render the component.",["334"],"'scrollPosition' is assigned a value but never used.",["323"],["324"],"no-self-assign","'sort[element][1]' is assigned to itself.","MemberExpression","selfAssignment","'sort[element][2]' is assigned to itself.","'checkDuration' is assigned a value but never used.",["323"],["324"],"'useEffect' is defined but never used.","'getCurrenciesNames' is defined but never used.",["323"],["324"],"React Hook useEffect has missing dependencies: 'fiat', 'prevCurrentValueTotal', and 'prevFiat'. Either include them or remove the dependency array.",["335"],["336"],["323"],["324"],"React Hook useEffect has a missing dependency: 'getSparkLineData'. Either include it or remove the dependency array.",["337"],"React Hook useEffect has missing dependencies: 'get24hMax' and 'get24hMin'. Either include them or remove the dependency array.",["338"],"'firstname' is assigned a value but never used.","'lastname' is assigned a value but never used.",["323"],["324"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",{"desc":"339","fix":"340"},"no-global-assign","no-unsafe-negation",{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"341","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"352","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},"Update the dependencies array to be: [loadUserObj]",{"range":"367","text":"368"},"Update the dependencies array to be: [currency, fiat, origin]",{"range":"369","text":"370"},"Update the dependencies array to be: [user, logedin, upDateMarketChartState, duration]",{"range":"371","text":"372"},"Update the dependencies array to be: [origin]",{"range":"373","text":"374"},{"range":"375","text":"370"},"Update the dependencies array to be: [nameArray, currentMarketChart, duration, currency, updateResultArrayState, positions, fiat]",{"range":"376","text":"377"},"Update the dependencies array to be: [fiat, overviewValues, prevCurrentValues, prevFiat]",{"range":"378","text":"379"},"Update the dependencies array to be: [calcChange]",{"range":"380","text":"381"},"Update the dependencies array to be: [user, cryptoCurrencies, logedin, renderOverview, fiat]",{"range":"382","text":"383"},"Update the dependencies array to be: [cryptoCurrencies, currentValueTotal, overviewValues, user]",{"range":"384","text":"385"},"Update the dependencies array to be: [fiat]",{"range":"386","text":"387"},"Update the dependencies array to be: [currentValueTotal, fiat, prevCurrentValueTotal, prevFiat]",{"range":"388","text":"389"},{"range":"390","text":"381"},"Update the dependencies array to be: [cryptoCurrencies, getSparkLineData, overviewValues]",{"range":"391","text":"392"},"Update the dependencies array to be: [dataArray, get24hMax, get24hMin]",{"range":"393","text":"394"},[2513,2515],"[loadUserObj]",[1747,1761],"[currency, fiat, origin]",[649,669],"[user, logedin, upDateMarketChartState, duration]",[1322,1324],"[origin]",[1607,1621],[5882,5923],"[nameArray, currentMarketChart, duration, currency, updateResultArrayState, positions, fiat]",[1792,1808],"[fiat, overviewValues, prevCurrentValues, prevFiat]",[1855,1869],"[calcChange]",[1517,1566],"[user, cryptoCurrencies, logedin, renderOverview, fiat]",[2069,2088],"[cryptoCurrencies, currentValueTotal, overviewValues, user]",[2343,2357],"[fiat]",[1308,1327],"[currentValueTotal, fiat, prevCurrentValueTotal, prevFiat]",[1374,1388],[366,400],"[cryptoCurrencies, getSparkLineData, overviewValues]",[578,589],"[dataArray, get24hMax, get24hMin]"]